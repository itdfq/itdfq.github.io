<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程简单实用</title>
      <link href="/2022/07/29/duo-xian-cheng-jian-dan-shi-yong/"/>
      <url>/2022/07/29/duo-xian-cheng-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程优化多任务处理"><a href="#多线程优化多任务处理" class="headerlink" title="多线程优化多任务处理"></a>多线程优化多任务处理</h2><hr><h4 id="常见的for循环写法"><a href="#常见的for循环写法" class="headerlink" title="常见的for循环写法"></a>常见的for循环写法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> itdfq<span class="token punctuation">.</span>optimizationfor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author duanfangqin 2022/7/6 12:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForDemo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> i1 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次的结果："</span><span class="token operator">+</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>               Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消耗的时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        [9,0,6,2,7,2,2,7,5,2]</span><span class="token comment" spellcheck="true">//        消耗的时间：50139</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多线程处理"><a href="#多线程处理" class="headerlink" title="多线程处理"></a>多线程处理</h4><pre><code>```javapackage itdfq.optimizationfor;import com.alibaba.fastjson.JSON;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.Random;import java.util.concurrent.*;/** * @author duanfangqin 2022/7/6 12:26 */public class ForDemo2 &#123;    public static void main(String[] args) &#123;        ThreadPoolExecutor pool = new ThreadPoolExecutor(10,10,6, TimeUnit.SECONDS,new LinkedBlockingQueue&lt;&gt;(),new ThreadPoolExecutor.CallerRunsPolicy());        long startTime = System.currentTimeMillis();        List&lt;Integer&gt; list  = Collections.synchronizedList(new ArrayList&lt;&gt;());        List&lt;Future&gt; futureList = new ArrayList&lt;&gt;();        try &#123;            for (int i=0;i&lt;10;i++)&#123;                Future&lt;Integer&gt; submit =  pool.submit(()-&gt;&#123;                    try &#123;                       Random random =  new Random();                        int i1 = random.nextInt(10);                        Thread.sleep(5000);                        list.add(i1);                       return i1;                    &#125; catch (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                    return null;                &#125;);                futureList.add(submit);            &#125;            for (Future future : futureList)&#123;                try &#123;                    Integer o = (Integer) future.get(6, TimeUnit.SECONDS);                &#125; catch (InterruptedException e) &#123;                    e.printStackTrace();                &#125; catch (ExecutionException e) &#123;                    e.printStackTrace();                &#125; catch (TimeoutException e) &#123;                    e.printStackTrace();                &#125;            &#125;            System.out.println(JSON.toJSONString(list));            long endTime = System.currentTimeMillis();            System.out.println(&quot;消耗的时间：&quot;+(endTime-startTime));        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;finally &#123;            pool.shutdown();        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> ThreadPoolExecutor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Redis</title>
      <link href="/2022/07/29/docker-an-zhuang-redis/"/>
      <url>/2022/07/29/docker-an-zhuang-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><ol><li>docker pull redis 拉取镜像<br>拉取docker镜像</li><li>获取redis.conf文件</li></ol><pre class="line-numbers language-shell"><code class="language-shell">    # bind 192.168.1.100 10.0.0.1    # bind 127.0.0.1 ::1    #bind 127.0.0.1        protected-mode no        port 6379        tcp-backlog 511        requirepass 000415        timeout 0        tcp-keepalive 300        daemonize no        supervised no        pidfile /var/run/redis_6379.pid        loglevel notice        logfile ""        databases 30        always-show-logo yes        save 900 1    save 300 10    save 60 10000        stop-writes-on-bgsave-error yes        rdbcompression yes        rdbchecksum yes        dbfilename dump.rdb        dir ./        replica-serve-stale-data yes        replica-read-only yes        repl-diskless-sync no        repl-disable-tcp-nodelay no        replica-priority 100        lazyfree-lazy-eviction no    lazyfree-lazy-expire no    lazyfree-lazy-server-del no    replica-lazy-flush no        appendonly yes        appendfilename "appendonly.aof"        no-appendfsync-on-rewrite no        auto-aof-rewrite-percentage 100    auto-aof-rewrite-min-size 64mb        aof-load-truncated yes        aof-use-rdb-preamble yes        lua-time-limit 5000        slowlog-max-len 128        notify-keyspace-events ""        hash-max-ziplist-entries 512    hash-max-ziplist-value 64        list-max-ziplist-size -2        list-compress-depth 0        set-max-intset-entries 512        zset-max-ziplist-entries 128    zset-max-ziplist-value 64        hll-sparse-max-bytes 3000        stream-node-max-bytes 4096    stream-node-max-entries 100        activerehashing yes        hz 10        dynamic-hz yes        aof-rewrite-incremental-fsync yes        rdb-save-incremental-fsync yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>docker run --restart=always --log-opt max-size=100m --log-opt max-file=2 -p 6379:6379 --name myredis -v /usr/software/redis/redis.conf:/etc/redis/redis.conf -v /usr/software/redis/data:/data -d redis redis-server /etc/redis/redis.conf  --appendonly yes  --requirepass 密码</code><br>&#x2F;usr&#x2F;software&#x2F;redis&#x2F;redis.conf是服务器文件地址 映射到docker 容器内部的地址&#x2F;etc&#x2F;redis&#x2F;redis.conf<br>同理：挂载的数据盘：&#x2F;usr&#x2F;software&#x2F;redis&#x2F;data:&#x2F;data<br>–appendonly yes  –requirepass 密码  后台启动 设置密码</li><li>启动是否成功可以通过 <code>docker logs</code> 容器名 进行查看</li><li>进入容器并启动redis <code>docker exec -it myredis redis-cli</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http接口加密解密的注解实现工具</title>
      <link href="/2022/02/24/http-jie-kou-jia-mi-jie-mi-de-zhu-jie-shi-xian-gong-ju/"/>
      <url>/2022/02/24/http-jie-kou-jia-mi-jie-mi-de-zhu-jie-shi-xian-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h3><ol><li>使用了@ControllerAdvice对请求数据进行预处理</li><li>随机生产16为字符串，使用RSA加密生成key</li><li>再对数据进行AES加密，使用步骤2key进行加密</li></ol><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-java"><code class="language-java">   <span class="token operator">&lt;</span>repositories<span class="token operator">></span>        <span class="token operator">&lt;</span>repository<span class="token operator">></span>            <span class="token operator">&lt;</span>id<span class="token operator">></span>jitpack<span class="token punctuation">.</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>            <span class="token operator">&lt;</span>url<span class="token operator">></span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jitpack<span class="token punctuation">.</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>repository<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>repositories<span class="token operator">></span>   <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>gitee<span class="token punctuation">.</span>godchin<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>common<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span>v2<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">2.24</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置公钥和私钥"><a href="#设置公钥和私钥" class="headerlink" title="设置公钥和私钥"></a>设置公钥和私钥</h4><pre class="line-numbers language-java"><code class="language-java">encry<span class="token punctuation">.</span><span class="token keyword">public</span><span class="token punctuation">.</span>key<span class="token operator">=</span>decrypt<span class="token punctuation">.</span><span class="token keyword">private</span><span class="token punctuation">.</span>key<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SecurityParameter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 入参是否解密，默认解密     */</span>    <span class="token keyword">boolean</span> <span class="token function">inDecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 出参是否加密，默认加密     */</span>    <span class="token keyword">boolean</span> <span class="token function">outEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h4><ul><li>controller</li></ul><pre class="line-numbers language-java"><code class="language-java">     <span class="token comment" spellcheck="true">/**     * 数据加密     * @param user     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/encry"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SecurityParameter</span><span class="token punctuation">(</span>inDecode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> DfqUsers user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 数据解密     * @param user     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/decrypt"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">,</span>RequestMethod<span class="token punctuation">.</span>POST<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SecurityParameter</span><span class="token punctuation">(</span>outEncode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">jiemi</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Object user<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>postman调用</p><ul><li><p>加密<br>  <img src="https://img-blog.csdnimg.cn/c874976a5e2143019d4463ee407572c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="加密"></p></li><li><p>解密</p></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/7bc761f75ed7431e9be6fc8785c519bb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="解密"></p><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://gitee.com/godchin/common">码云</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Redisson的分布式锁注解工具</title>
      <link href="/2022/02/24/ji-yu-redisson-de-fen-bu-shi-suo-zhu-jie-gong-ju/"/>
      <url>/2022/02/24/ji-yu-redisson-de-fen-bu-shi-suo-zhu-jie-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><pre class="line-numbers language-java"><code class="language-java">  <span class="token operator">&lt;</span>repositories<span class="token operator">></span>        <span class="token operator">&lt;</span>repository<span class="token operator">></span>        <span class="token operator">&lt;</span>id<span class="token operator">></span>jitpack<span class="token punctuation">.</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>        <span class="token operator">&lt;</span>url<span class="token operator">></span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jitpack<span class="token punctuation">.</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>repository<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>repositories<span class="token operator">></span>      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>gitee<span class="token punctuation">.</span>godchin<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>common<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="首先配置Redis"><a href="#首先配置Redis" class="headerlink" title="首先配置Redis"></a>首先配置Redis</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#Redis服务器地址</span>spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>host<span class="token operator">=</span><span class="token number">121.36</span><span class="token punctuation">.</span><span class="token number">72.23</span>spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>password<span class="token operator">=</span>root<span class="token comment" spellcheck="true">#Redis服务器连接端口</span>spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token comment" spellcheck="true">#Redis数据库索引（默认为0）</span>spring<span class="token punctuation">.</span>redis<span class="token punctuation">.</span><span class="token keyword">database</span><span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启扫描包"><a href="#开启扫描包" class="headerlink" title="开启扫描包"></a>开启扫描包</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span> basePackages <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"com.itdfq.common"</span><span class="token punctuation">,</span><span class="token string">"com.itdfq.loginuser"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>com.itdfq.common</code> 是工具包的包名，让项目进行扫描，<code>com.itdfq.loginuser</code> 是本地项目的包接口</p><h4 id="使用注解-DisLock"><a href="#使用注解-DisLock" class="headerlink" title="使用注解@DisLock"></a>使用注解@DisLock</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DisLock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//锁的key，如果不填默认是包名+类名+参数名</span>    String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//过期时间</span>    <span class="token keyword">long</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> 600L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待获取锁时间</span>    <span class="token keyword">long</span> <span class="token function">waitTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> 10000L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否抛出异常</span>    <span class="token keyword">boolean</span> <span class="token function">throwExceptionIfFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>在Redis中定义了study:lock:sum  的值为50,使用jMether创建100个线程并发操作，模拟用户批量下单<br><img src="https://img-blog.csdnimg.cn/49161daf13564251b496a650fc969eb8.png" alt="Redis库存"></p><p>操作代码：</p><pre class="line-numbers language-java"><code class="language-java">          Integer sum <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>KEY<span class="token punctuation">,</span> sum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> EXPIRE_SECOND<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"购买成功，剩余库存"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 使用注解加锁</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@DisLock</span>    <span class="token keyword">public</span> Result <span class="token function">lockTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Integer sum <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>KEY<span class="token punctuation">,</span> sum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> EXPIRE_SECOND<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"购买成功，剩余库存"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"没有库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建Controller测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author GodChin * @date 2022/2/24 10:23 * @email 909256107@qq.com */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/lock"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisLockTestController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisService lockTestService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/submit3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">submit3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockTestService<span class="token punctuation">.</span><span class="token function">lockTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：<br><img src="https://img-blog.csdnimg.cn/69670abb08664aa1bc7a50d35ec60d3a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASVRkZnE=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="库存"><br><img src="https://img-blog.csdnimg.cn/3ff4f1edfeba4efaa484db235410b33c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="jMeter"></p><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://gitee.com/godchin/common">码云</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钉钉群机器人告警工具</title>
      <link href="/2022/02/11/ding-ding-qun-ji-qi-ren-gao-jing-gong-ju/"/>
      <url>/2022/02/11/ding-ding-qun-ji-qi-ren-gao-jing-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="钉钉群机器人"><a href="#钉钉群机器人" class="headerlink" title="钉钉群机器人"></a>钉钉群机器人</h2><p>项目封装了钉钉群机器人的发送方法，只需要输入ACCESS_TOKEN和SECRET，选择合适的发送类型，就可以一键发送。</p><h2 id="食用"><a href="#食用" class="headerlink" title="食用"></a>食用</h2><ol><li><p>添加pom依赖</p><pre class="line-numbers language-java"><code class="language-java">     <span class="token operator">&lt;</span>repositories<span class="token operator">></span>        <span class="token operator">&lt;</span>repository<span class="token operator">></span>            <span class="token operator">&lt;</span>id<span class="token operator">></span>jitpack<span class="token punctuation">.</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>            <span class="token operator">&lt;</span>url<span class="token operator">></span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>jitpack<span class="token punctuation">.</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>repository<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>repositories<span class="token operator">></span>     <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>gitee<span class="token punctuation">.</span>godchin<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>dingding_Utils<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取access_token和秘钥<br><img src="https://img-blog.csdnimg.cn/a3dc774451084bee8039582deafcd74d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="钉钉机器人"><br><a href="https://oapi.dingtalk.com/robot/send?access_token=####">https://oapi.dingtalk.com/robot/send?access_token=####</a><br>获取access_token:</p></li><li><p>调用DingDingService.send()方法发送消息，在参数中设置access_token和秘钥。<br>更多发送参数，参考：<a href="https://open.dingtalk.com/document/app#/serverapi2/qf2nxq">钉钉机器人文档</a></p></li><li><p>测试</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TextMsg textMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textMsg<span class="token punctuation">.</span><span class="token function">setSecret</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>        textMsg<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>ACCESS_TOKEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        textMsg<span class="token punctuation">.</span><span class="token function">setAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMsg<span class="token punctuation">.</span>At</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textMsg<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMsg<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token string">"sdsarwhfnsduhfsbhfiadfdusfwefwe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DingResult send <span class="token operator">=</span> DingDingService<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>textMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>send<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>结果：<br><img src="https://img-blog.csdnimg.cn/4582fb55e20b4729bedba54e3a8470a2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="结果"><br><img src="https://img-blog.csdnimg.cn/601dbf17a3ed4ae8ba641877d91ae15b.png" alt="机器人发送消息"><br>源码地址：<a href="https://gitee.com/godchin/dingding_Utils">码云</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符流和字节流的区别</title>
      <link href="/2022/01/05/zi-fu-liu-he-zi-jie-liu-de-qu-bie/"/>
      <url>/2022/01/05/zi-fu-liu-he-zi-jie-liu-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>字节流是指传输过程中，传输数据的最基本单位是字节的流，一个不包含边界数据的连续流；字节流是由字节组成的，主要用在处理二进制数据。<br><img src="https://img-blog.csdnimg.cn/a6081b9f608d40eba48f40df2e5b918d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="字节流结果"></p><h3 id="OutputStream字节输出流"><a href="#OutputStream字节输出流" class="headerlink" title="OutputStream字节输出流"></a>OutputStream字节输出流</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>这个抽象类是所有表示字节输出流的类的超类。具体方法如下：</p><ol><li>write(int b)<br> 将指定的字节写入此输出流</li><li>write(byte b[])<br> 将指定字节数组中的b.length个字节写入此输出流</li><li>write(byte b[], int off, int len)<br> 将指定字节数组中的len个字节从偏移量off开始写入此输出流。 write(b, off, len)的一般约定是将数组b中的某些字节按顺序写入输出流； 元素b[off]是写入的第一个字节， b[off+len-1]是此操作写入的最后一个字节</li><li>flush()<br> 刷新此输出流并强制写出任何缓冲的输出字节</li><li>close()<br>关闭此输出流并释放与此流关联的任何系统资源</li></ol><hr><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p>FileOutputStream继承OutputStream，有两个常用构造方法</p><ol><li>FileOutputStream(File file)<br> 对文件file进行覆盖写入</li><li>FileOutputStream(File file, boolean append)<br>append:true 代表追加写入</li></ol><h4 id="写入举例"><a href="#写入举例" class="headerlink" title="写入举例"></a>写入举例</h4><ol><li><p>覆盖写入</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果文件不存在会自动创建</span>    OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> <span class="token string">"Hello World\nsddgdgdf"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为是字节流，所以要转化成字节数组进行输出</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>追加写入</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">continueWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果文件不存在会自动创建</span>    OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> <span class="token string">"Hello World\nsddgdgdf3434"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为是字节流，所以要转化成字节数组进行输出</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token operator">:</span> bytes<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="InputStream字节输入流"><a href="#InputStream字节输入流" class="headerlink" title="InputStream字节输入流"></a>InputStream字节输入流</h3><p>这个抽象类是表示字节输入流的所有类的超类</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li><p>read()<br> 从输入流中读取下一个字节的数据。 值字节以0到255范围内的int形式返回。 如果由于已到达流末尾而没有可用字节，则返回值-1 。 此方法会阻塞，直到输入数据可用、检测到流结束或抛出异常为止</p></li><li><p>read(byte b[])<br> 从输入流中读取一定数量的字节并将它们存储到缓冲区数组b 。 实际读取的字节数作为整数返回。 此方法会阻塞，直到输入数据可用、检测到文件结尾或抛出异常。<br>如果b的长度为零，则不读取字节并返回0 ； 否则，将尝试读取至少一个字节。 如果由于流位于文件末尾而没有可用字节，则返回值-1 ； 否则，至少读取一个字节并将其存储到b 。<br>读取的第一个字节存储到元素b[0] ，下一个存储到b[1] ，依此类推。 读取的字节数最多等于b的长度。 令k为实际读取的字节数； 这些字节将存储在元素b[0]到b[ k -1] ，而元素b[ k ]到b[b.length-1]不受影响。</p></li><li><p>read(byte b[], int off, int len)<br> 从输入流中读取最多len个字节的数据到一个字节数组中。 尝试读取多达len个字节，但可能会读取较小的数字。 实际读取的字节数作为整数返回。<br> 读取的第一个字节存储到元素b[off] ，下一个存储到b[off+1] ，依此类推</p></li><li><p>skip(long n)<br> 跳过并丢弃此输入流中的n字节数据，在跳过n个字节之前到达文件末尾, 返回实际跳过的字节数并抛出异常。 如果n为负，则InputStream类的skip方法始终返回 0</p></li><li><p>available()<br> 返回当前可以跳过的最大值</p></li><li><p>close()</p></li><li><p>markSupported()<br>如果此流实例支持标记和重置方法，则为true ； 否则为false </p></li><li><p>mark(int readlimit)<br> 标记此输入流中的当前位置。 对reset方法的后续调用将此流重新定位在最后标记的位置，以便后续读取重新读取相同的字节。</p></li><li><p>reset()<br>将此流重新定位到上次在此输入流上调用mark方法时的位置</p></li></ol><h4 id="读取举例"><a href="#读取举例" class="headerlink" title="读取举例"></a>读取举例</h4><ol><li><p>文件大小确定</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可以根据文件的大小设置字节数组的长度</span>        <span class="token keyword">long</span> length <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件大小不确定</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readNoSize2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//-1文件读取完毕</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> temp<span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>  字节流就是普通的二进制流，读出来的是bit，而字节流不便于处理Unicode形式存储的信息。字符流就是在字节流的基础按照字符编码处理，处理的是char。<br>  <img src="https://img-blog.csdnimg.cn/408ae67c72b54451b7c6bb435cefc32a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="字符流结构"></p><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>read()</li><li>read(char cbuf[])</li><li>read(char cbuf[], int off, int len)</li><li>skip(long n)</li><li>ready()：告诉这个流是否准备好被读取</li><li>markSupported()</li><li>mark(int readAheadLimit)</li><li>reset()</li><li>close()</li></ol><h3 id="字符流读取举例"><a href="#字符流读取举例" class="headerlink" title="字符流读取举例"></a>字符流读取举例</h3><ol><li><p>文件大小确定</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reader out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件大小不确定 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readNoSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Reader out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        arrs<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> temp<span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span><span class="token punctuation">;</span>            len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arrs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><p>用于写入字符流的抽象类；内置一个保存字符串和单个字符写入的临时缓冲，大小为1024</p><h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>write(char cbuf[])</li><li>write(char cbuf[], int off, int len)</li><li>write(String str) ：写入一个字符串</li><li>write(String str, int off, int len)</li><li>append(CharSequence csq)：将指定的字符序列附加到此编写器</li><li>append(CharSequence csq, int start, int end)</li><li>append(char c)</li><li>flush()<br>冲洗流。 如果流已将来自各种 write() 方法的任何字符保存在缓冲区中，则立即将它们写入其预期目的地。 然后，如果该目标是另一个字符或字节流，则刷新它。 因此，一次 flush() 调用将刷新 Writers 和 OutputStreams 链中的所有缓冲区</li><li>close()</li></ol><h4 id="字符流写入举例"><a href="#字符流写入举例" class="headerlink" title="字符流写入举例"></a>字符流写入举例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//覆盖原有的</span>        Writer out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="字符流和字节流区别"><a href="#字符流和字节流区别" class="headerlink" title="字符流和字节流区别"></a>字符流和字节流区别</h2><ol><li>字节流可用于任何类型的对象，包括二进制对象，而字符流只能处理字符或者字符串； </li><li>字节流提供了处理任何类型的IO操作的功能，但它不能直接处理Unicode字符，而字符流就可以</li><li>字节流默认不使用缓冲区；字符流使用缓冲区</li><li>在硬盘上的所有文件都是以字节形式存在的（图片，声音，视频），而字符值在内存中才会形成。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Bean的后置处理</title>
      <link href="/2022/01/05/spring-bean-de-hou-zhi-chu-li/"/>
      <url>/2022/01/05/spring-bean-de-hou-zhi-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化Bean的后置处理"><a href="#初始化Bean的后置处理" class="headerlink" title="初始化Bean的后置处理"></a>初始化Bean的后置处理</h2><hr><h4 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h4><p>BeanPostProcessor定义了两种bean的处理方法</p><ol><li><p>postProcessBeforeInitialization：<br>初始化前回调</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * bean加载之前处理     *     * @param bean     * @param beanName     * @return     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>postProcessAfterInitialization<br>初始化之后回调，返回可以是原始实例，也可以是包装好的实例； 如果为null ，则不会调用后续的 BeanPostProcessors</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * bean加载之后处理     *     * @param bean     * @param beanName     * @return     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="DestructionAwareBeanPostProcessor"><a href="#DestructionAwareBeanPostProcessor" class="headerlink" title="DestructionAwareBeanPostProcessor"></a>DestructionAwareBeanPostProcessor</h4><ol><li><p>继承BeanPostProcessor，额外多了两个方法</p></li><li><p>postProcessBeforeDestruction 在销毁之前将此 BeanPostProcessor 应用于给定的 bean 实例，例如调用自定义销毁回调</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 销毁前的后置处理     * @param bean     * @param beanName     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeforeDestruction</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>requiresDestruction 是否需要后处理器销毁，默认是true</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 是否需要销毁 * @param bean * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">requiresDestruction</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> DestructionAwareBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">requiresDestruction</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="InstantiationAwareBeanPostProcessor"><a href="#InstantiationAwareBeanPostProcessor" class="headerlink" title="InstantiationAwareBeanPostProcessor"></a>InstantiationAwareBeanPostProcessor</h4><ol><li><p>postProcessBeforeInstantiation<br> 初始化之前处理,默认是null</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 默认是null     * 初始化之前处理     * @param beanClass     * @param beanName     * @return     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> InstantiationAwareBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>postProcessAfterInstantiation<br> 初始化之后是否需要填充字段,在 bean 被实例化之后，通过构造函数或工厂方法，但在 Spring 属性填充（从显式属性或自动装配）发生之前执行操作。<br> 返回：如果应该在 bean 上设置属性，则为true ； 如果应跳过属性填充，则为false</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 初始化之后是否需要填充字段     * 在 bean 被实例化之后，通过构造函数或工厂方法，但在 Spring 属性填充（从显式属性或自动装配）发生之前执行操作。     * @param bean     * @param beanName     * @return 如果应该在 bean 上设置属性，则为true ； 如果应跳过属性填充，则为false     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> InstantiationAwareBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>postProcessProperties<br> 在工厂将给定的属性值应用于给定的 bean 之前对给定的属性值进行后处理，无需任何属性描述符。<br> 返回：应用于给定 bean 的实际属性值（可以是传入的 PropertyValues 实例），或者null继续处理现有属性，但特别继续调用postProcessPropertyValues （需要为当前 bean 类初始化PropertyDescriptor ）</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 在工厂将给定的属性值应用于给定的 bean 之前对给定的属性值进行后处理，无需任何属性描述符     * @param pvs     * @param bean     * @param beanName     * @return 应用于给定 bean 的实际属性值（可以是传入的 PropertyValues 实例），或者null继续处理现有属性，     * 但特别继续调用postProcessPropertyValues （需要为当前 bean 类初始化PropertyDescriptor ）     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PropertyValues <span class="token function">postProcessProperties</span><span class="token punctuation">(</span>PropertyValues pvs<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> InstantiationAwareBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="MergedBeanDefinitionPostProcessor"><a href="#MergedBeanDefinitionPostProcessor" class="headerlink" title="MergedBeanDefinitionPostProcessor"></a>MergedBeanDefinitionPostProcessor</h4><ol><li><p>postProcessMergedBeanDefinition</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 对指定 bean 的进行后处理     * @param beanDefinition     * @param beanType     * @param beanName     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span>RootBeanDefinition beanDefinition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>resetBeanDefinition</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 通过名称重置指定bean     * 指定名称的 bean 定义已重置的通知，并且此后处理器应清除受影响 bean 的所有元数据     * @param beanName     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resetBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MergedBeanDefinitionPostProcessor<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">resetBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> IOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq延迟消费（TTL实现）</title>
      <link href="/2021/12/10/rabbitmq-yan-chi-xiao-fei/"/>
      <url>/2021/12/10/rabbitmq-yan-chi-xiao-fei/</url>
      
        <content type="html"><![CDATA[<h2 id="延时消费"><a href="#延时消费" class="headerlink" title="延时消费"></a>延时消费</h2><p>RabbitMQ本身并不提供延迟队列的功能，但是我们仍然可以使用RabbitMQ的 TTL（Time-To-Live） 和 DLX（Dead Letter Exchanges） 这两个扩展特性来实现延迟队列，实现消息的延迟消费和延迟重试的功能。</p><h3 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h3><ul><li><p>固定时间延迟消费</p><p> <img src="https://img-blog.csdnimg.cn/21ac266ad1ba434faab5350fc3c9447a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="固定时间延迟"></p></li><li><p>指定时间消费<br>  <img src="https://img-blog.csdnimg.cn/1c1173fa6aa34723b1909839d5b0ae06.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="指定时间消费"></p></li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="连接配置"><a href="#连接配置" class="headerlink" title="连接配置"></a>连接配置</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itdfq<span class="token punctuation">.</span>delay<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CachingConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CorrelationData<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitAdmin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: QianMo * @Date: 2021/10/19 18:34 * @Description: */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;spring.rabbitmq.addresses&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;spring.rabbitmq.port&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;spring.rabbitmq.username&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;spring.rabbitmq.password&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&amp;#123;spring.rabbitmq.virtual-host&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String virtualHost<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接工厂</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CachingConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setAddresses</span><span class="token punctuation">(</span>address <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span>virtualHost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TODO  消息发送确认--回调</span><span class="token comment" spellcheck="true">//        connectionFactory.setPublisherConfirms(true);</span>        <span class="token keyword">return</span> connectionFactory<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//RabbitAdmin类封装对RabbitMQ的管理操作</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitAdmin <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用Template</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">newRabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span><span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置监听确认mq（交换器）接受到信息</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token function">confirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加监听 失败鉴定（路由没有收到）</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token function">returnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//****************生产者发送确认********************</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback <span class="token function">confirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送者确认发送给mq成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送者发送失败，考虑重发"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//****************失败通知********************</span>    <span class="token comment" spellcheck="true">//失败才通知，成功不通知</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate<span class="token punctuation">.</span>ReturnCallback <span class="token function">returnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> String replayText<span class="token punctuation">,</span> String exchange<span class="token punctuation">,</span> String rountingKey<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无效路由信息，需要考虑另外处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Returned replayText:"</span> <span class="token operator">+</span> replayText<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Returned exchange:"</span> <span class="token operator">+</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Returned rountingKey:"</span> <span class="token operator">+</span> rountingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Returned Message:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置延时队列"><a href="#设置延时队列" class="headerlink" title="设置延时队列"></a>设置延时队列</h4><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 延时队列     *     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-exchange 声明了队列里的死信转发到的DLX名称，</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> RabbitMqConstant<span class="token punctuation">.</span>IMMEDIATE_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-routing-key 声明了这些死信在转发时携带的 routing-key 名称。</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> RabbitMqConstant<span class="token punctuation">.</span>IMMEDIATE_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-message-ttl 声明该队列死信可存活时间</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> RabbitMqConstant<span class="token punctuation">.</span>DELAY_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>RabbitMqConstant<span class="token punctuation">.</span>DELAY_QUEUE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置立即消费监听"><a href="#设置立即消费监听" class="headerlink" title="设置立即消费监听"></a>设置立即消费监听</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itdfq<span class="token punctuation">.</span>delay<span class="token punctuation">.</span>message<span class="token punctuation">.</span>listen<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itdfq<span class="token punctuation">.</span>delay<span class="token punctuation">.</span>constant<span class="token punctuation">.</span>RabbitMqConstant<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>AcknowledgeMode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitAdmin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>SimpleMessageListenerContainer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author: QianMo * @Date: 2021/10/21 10:29 * @Description: */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayListenConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitAdmin rabbitAdmin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ConnectionFactory connectionFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/********************立即消费配置**********************/</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">Exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DirectExchange exchange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>                RabbitMqConstant<span class="token punctuation">.</span>IMMEDIATE_EXCHANGE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exchange<span class="token punctuation">.</span><span class="token function">setAdminsThatShouldDeclare</span><span class="token punctuation">(</span>rabbitAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exchange<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>RabbitMqConstant<span class="token punctuation">.</span>IMMEDIATE_QUEUE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">setAdminsThatShouldDeclare</span><span class="token punctuation">(</span>rabbitAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">subscribeNotifyBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Binding binding <span class="token operator">=</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">Exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>RabbitMqConstant<span class="token punctuation">.</span>IMMEDIATE_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        binding<span class="token punctuation">.</span><span class="token function">setAdminsThatShouldDeclare</span><span class="token punctuation">(</span>rabbitAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> binding<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleMessageListenerContainer <span class="token function">container</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"delayRabbitmqListener"</span><span class="token punctuation">)</span> DelayRabbitmqListener delayRabbitmqListener<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SimpleMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setQueues</span><span class="token punctuation">(</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span>delayRabbitmqListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setDefaultRequeueRejected</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//手动提交</span>        container<span class="token punctuation">.</span><span class="token function">setAcknowledgeMode</span><span class="token punctuation">(</span>AcknowledgeMode<span class="token punctuation">.</span>MANUAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置消费者ack消息的模式，默认是自动，此处设置为手动</span><span class="token comment" spellcheck="true">//        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="指定时间（延时消费）"><a href="#指定时间（延时消费）" class="headerlink" title="指定时间（延时消费）"></a>指定时间（延时消费）</h3><h5 id="设置延时队列-1"><a href="#设置延时队列-1" class="headerlink" title="设置延时队列"></a>设置延时队列</h5><pre class="line-numbers language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**     * 延时队列，可变延时     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">variableDelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-exchange 声明了队列里的死信转发到的DLX名称，</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> RabbitMqConstant<span class="token punctuation">.</span>IMMEDIATE_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-routing-key 声明了这些死信在转发时携带的 routing-key 名称。</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> RabbitMqConstant<span class="token punctuation">.</span>IMMEDIATE_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>RabbitMqConstant<span class="token punctuation">.</span>DELAY_VARIABLE_QUEUE_KEY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 可变延时消费     * @param msg  消息     * @param expiration 延时时间单位 ： 毫秒     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span>Integer expiration<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>RabbitMqConstant<span class="token punctuation">.</span>DELAY_VARIABLE_EXCHANGE_KEY<span class="token punctuation">,</span>                RabbitMqConstant<span class="token punctuation">.</span>DELAY_VARIABLE_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">,</span>                message <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"可变延时消费发送消息: &amp;#123;&amp;#125;, and expiration in &amp;#123;&amp;#125;ms"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> expiration<span class="token punctuation">)</span><span class="token punctuation">;</span>                    message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>expiration<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> message<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CuratorFramework实现zk同步本地配置</title>
      <link href="/2021/10/25/curatorframework-shi-xian-zk-tong-bu-ben-di-pei-zhi/"/>
      <url>/2021/10/25/curatorframework-shi-xian-zk-tong-bu-ben-di-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot连接Zk"><a href="#SpringBoot连接Zk" class="headerlink" title="SpringBoot连接Zk"></a>SpringBoot连接Zk</h2><hr><h3 id="连接配置"><a href="#连接配置" class="headerlink" title="连接配置"></a>连接配置</h3><ul><li><p>pom文件导入</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            zk客户端<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>curator<span class="token operator">-</span>recipes<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>curator<span class="token operator">-</span>framework<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>curator<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>                <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>连接配置</p><pre class="line-numbers language-java"><code class="language-java">zk<span class="token operator">:</span>  url<span class="token operator">:</span> ###  projectName<span class="token operator">:</span> <span class="token operator">/</span>itdfq<span class="token operator">/</span>zookeeperDemo  #休眠时间  baseSleepTimeMs<span class="token operator">:</span> <span class="token number">1000</span>  #失败重试次数  maxRetries<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>连接设置</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Zookeeper 框架式客户端     *     * @return CuratorFramework     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CuratorFramework <span class="token function">getCuratorFramework</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重试策略</span>        RetryPolicy retryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span>zkProperties<span class="token punctuation">.</span><span class="token function">getBaseSleepTimeMs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zkProperties<span class="token punctuation">.</span><span class="token function">getMaxRetries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">newClient</span><span class="token punctuation">(</span>zkProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 监视 ZK     *     * @return TreeCache     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TreeCache <span class="token function">getTreeCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeCache</span><span class="token punctuation">(</span>curatorFramework<span class="token punctuation">,</span> zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CuratorFramework curatorFramework<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TreeCache treeCache<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 本地配置     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"================初始化配置================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curatorFramework<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            treeCache<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 从zk中获取配置放入本地配置中</span>            Stat stat <span class="token operator">=</span> curatorFramework<span class="token punctuation">.</span><span class="token function">checkExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stat <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                curatorFramework<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> configList <span class="token operator">=</span> curatorFramework<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"配置参数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>configList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> configList<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> curatorFramework<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ZkConstant<span class="token punctuation">.</span>SEPARATOR <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"节点:【&amp;#123;&amp;#125;】   key：【&amp;#123;&amp;#125;】   Value:【&amp;#123;&amp;#125;】 "</span><span class="token punctuation">,</span> zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ZkConstant<span class="token punctuation">.</span>SEPARATOR <span class="token operator">+</span> s<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 监听属性值变更</span>            treeCache<span class="token punctuation">.</span><span class="token function">getListenable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeCacheListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">childEvent</span><span class="token punctuation">(</span>CuratorFramework curatorFramework<span class="token punctuation">,</span> TreeCacheEvent treeCacheEvent<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>treeCacheEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TreeCacheEvent<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>NODE_ADDED<span class="token punctuation">)</span> <span class="token operator">||</span>                            Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>treeCacheEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TreeCacheEvent<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>NODE_UPDATED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        String updateKey <span class="token operator">=</span> treeCacheEvent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ZkConstant<span class="token punctuation">.</span>SEPARATOR<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>updateKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>treeCacheEvent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"数据更新：更新类型【&amp;#123;&amp;#125;】，更新的key:【&amp;#123;&amp;#125;】,更新value:【&amp;#123;&amp;#125;】"</span><span class="token punctuation">,</span> treeCacheEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ZkConstant<span class="token punctuation">.</span>SEPARATOR <span class="token operator">+</span> updateKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>treeCacheEvent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"zk配置初始化异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="get-x2F-set方法"><a href="#get-x2F-set方法" class="headerlink" title="get&#x2F;set方法"></a>get&#x2F;set方法</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 获取同步配置属性     * &lt;/p>     * zk的value保存在本地缓存     *     * @param key zk-Key     * @return String     */</span>    <span class="token keyword">public</span> String <span class="token function">getProperties</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取zk的节点value     * &lt;/>     *     * @return String     */</span>    <span class="token keyword">public</span> String <span class="token function">getZkValue</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> curatorFramework<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ZkConstant<span class="token punctuation">.</span>SEPARATOR <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置zk的key value     * &lt;p>     * 如果项目启动，会同步更新本地配置缓存     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">setZkValue</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String propertiesKey <span class="token operator">=</span> zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ZkConstant<span class="token punctuation">.</span>SEPARATOR <span class="token operator">+</span> key<span class="token punctuation">;</span>            Stat stat <span class="token operator">=</span> curatorFramework<span class="token punctuation">.</span><span class="token function">checkExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>propertiesKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stat <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                curatorFramework<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>propertiesKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            curatorFramework<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>propertiesKey<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><pre class="line-numbers language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**     * 分布式锁 对象     * &lt;p/>     * 互斥锁     *     * @param path     * @return     */</span>    <span class="token keyword">public</span> InterProcessMutex <span class="token function">getLock</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InterProcessMutex lock <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span>curatorFramework<span class="token punctuation">,</span> zkProperties<span class="token punctuation">.</span><span class="token function">getProjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ZkConstant<span class="token punctuation">.</span>SEPARATOR <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lock<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取锁失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h3><ul><li>项目启动初始化<br><img src="https://img-blog.csdnimg.cn/da1e996ac4964b30bc34e7541b5862cd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="项目初始化"></li><li>在zk中改个配置<br><img src="https://img-blog.csdnimg.cn/16823ba4068041778b0ec54f3651c1e0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="更改配置"></li><li>结果<br> <img src="https://img-blog.csdnimg.cn/806cb8755a2645f3af5a40676b0e1bd0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASVRkZnE=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="结果"></li><li>在线获取配置</li></ul><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get/&amp;#123;key&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span> String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求参数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"结果："</span> <span class="token operator">+</span> zkApi<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/660739ce23b34291963b4a3ff8c37566.png" alt="获取配置"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB查找附近的人</title>
      <link href="/2021/08/24/mongodb-cha-zhao-fu-jin-de-ren/"/>
      <url>/2021/08/24/mongodb-cha-zhao-fu-jin-de-ren/</url>
      
        <content type="html"><![CDATA[<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><pre class="line-numbers language-java"><code class="language-java">db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"places"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建集合</span> db<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">"places"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//#插入数据</span>db<span class="token punctuation">.</span>places<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token operator">:</span> <span class="token string">"Central Park"</span><span class="token punctuation">,</span>   location<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token string">"Point"</span><span class="token punctuation">,</span> coordinates<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">73.97</span><span class="token punctuation">,</span> <span class="token number">40.77</span> <span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   category<span class="token operator">:</span> <span class="token string">"Parks"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span>places<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   name<span class="token operator">:</span> <span class="token string">"Sara D. Roosevelt Park"</span><span class="token punctuation">,</span>   location<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token string">"Point"</span><span class="token punctuation">,</span> coordinates<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">73.9928</span><span class="token punctuation">,</span> <span class="token number">40.7193</span> <span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   category<span class="token operator">:</span> <span class="token string">"Parks"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span>places<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   name<span class="token operator">:</span> <span class="token string">"Polo Grounds"</span><span class="token punctuation">,</span>   location<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token string">"Point"</span><span class="token punctuation">,</span> coordinates<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">73.9375</span><span class="token punctuation">,</span> <span class="token number">40.8303</span> <span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   category<span class="token operator">:</span> <span class="token string">"Stadiums"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//#在location字段上创建索引</span>db<span class="token punctuation">.</span>places<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> location<span class="token operator">:</span> <span class="token string">"2dsphere"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//以下查询使用$near操作返回距离指定GeoJSON至少1000米且最远5000米的数据，并按从最近到最远的顺序排序：</span>db<span class="token punctuation">.</span>places<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     location<span class="token operator">:</span>       <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $near<span class="token operator">:</span>          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            $geometry<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token string">"Point"</span><span class="token punctuation">,</span>  coordinates<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">73.9667</span><span class="token punctuation">,</span> <span class="token number">40.78</span> <span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            $minDistance<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>            $maxDistance<span class="token operator">:</span> <span class="token number">5000</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按照距离指定最近的</span>db<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     geoNear<span class="token operator">:</span> <span class="token string">"places"</span><span class="token punctuation">,</span>     near<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token operator">:</span> <span class="token string">"Point"</span><span class="token punctuation">,</span> coordinates<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token operator">-</span><span class="token number">73.9667</span><span class="token punctuation">,</span> <span class="token number">40.78</span> <span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>     spherical<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     query<span class="token operator">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> category<span class="token operator">:</span> <span class="token string">"Parks"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><pre class="line-numbers language-java"><code class="language-java">db<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'杨帅哥'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市青山湖区市场和质量监督管理局'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">115.993121</span><span class="token punctuation">,</span><span class="token number">28.676436</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'王美眉'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市青山湖区创新一路职位小厨'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">116.000093</span><span class="token punctuation">,</span><span class="token number">28.679402</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'张美眉'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市青山湖区紫阳大道1916号'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">115.999967</span><span class="token punctuation">,</span><span class="token number">28.679743</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'李美眉'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市青山湖区云中城'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">115.995593</span><span class="token punctuation">,</span><span class="token number">28.681632</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'彭美眉'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市青山湖区北京东路1666号'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">115.975543</span><span class="token punctuation">,</span><span class="token number">28.679509</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'赵美眉'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市青山湖区市场一路大润发'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">115.968428</span><span class="token punctuation">,</span><span class="token number">28.669368</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'廖美眉'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市南昌县奥林匹克中心'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">116.035262</span><span class="token punctuation">,</span><span class="token number">28.677037</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'余帅哥'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市南昌县科技学院瑶湖校区'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">116.02477</span><span class="token punctuation">,</span><span class="token number">28.68667</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'吴帅哥'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市青山湖区创新一路母婴店'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">116.002384</span><span class="token punctuation">,</span><span class="token number">28.683865</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'何帅哥'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token operator">:</span><span class="token string">'江西省南昌市青山湖区紫阳大道2999号'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> loc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">116.000821</span><span class="token punctuation">,</span><span class="token number">28.68129</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置索引</span>db<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'loc'</span><span class="token operator">:</span><span class="token string">"2d"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询附近2000米的人</span>db<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    $geoNear<span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        near<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">115.999567</span><span class="token punctuation">,</span><span class="token number">28.681813</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当前坐标</span>        spherical<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 计算球面距离</span>        distanceMultiplier<span class="token operator">:</span> <span class="token number">6378137</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 地球半径,单位是米,那么的除的记录也是米</span>        maxDistance<span class="token operator">:</span> <span class="token number">1000</span><span class="token operator">/</span><span class="token number">6378137</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 过滤条件2000米内，需要弧度</span>        distanceField<span class="token operator">:</span> <span class="token string">"distance"</span> <span class="token comment" spellcheck="true">// 距离字段别名</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Shiro</title>
      <link href="/2021/06/07/springboot-ji-cheng-shiro/"/>
      <url>/2021/06/07/springboot-ji-cheng-shiro/</url>
      
        <content type="html"><![CDATA[<h2 id="Shiro-简介"><a href="#Shiro-简介" class="headerlink" title="Shiro 简介"></a>Shiro 简介</h2><ul><li><p>官方介绍</p><p> Apache Shiro™ is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p><p> Apache Shiro™是一个强大且易于使用的 Java 安全框架，可执行身份验证、授权、加密和会话管理。凭借 Shiro 易于理解的 API，您可以快速轻松地保护任何应用程序 - 从最小的移动应用程序到最大的 Web 和企业应用程序。</p></li></ul><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><pre class="line-numbers language-java"><code class="language-java">        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>shiro<span class="token operator">-</span>spring<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.7</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><p>配置UserRealm <code>主要是处理用户权限</code></p><pre><code>package com.itdfq.springboot_shrio.config;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;/** * @Author GocChin * @Date 2021/6/6 15:29 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: */public class UserRealm extends AuthorizingRealm &#123;    //授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;        System.out.println(&quot;执行了授权=》doGetAuthorizationInfo&quot;);        return null;    &#125;    //认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;        System.out.println(&quot;执行了认证》doGetAuthenticationInfo&quot;);        return null;    &#125;&#125;</code></pre></li><li><p>编写Config  <code>主要处理请求</code></p></li></ul><pre><code>package com.itdfq.springboot_shrio.config;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.LinkedHashMap;import java.util.Map;/** * @Author GocChin * @Date 2021/6/6 15:28 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: */@Configurationpublic class ShiroConfig &#123;    //ShiroFilterFacctoryBean  3    @Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;DefaultWebSecurityManager&quot;) DefaultWebSecurityManager manager)&#123;        ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();        //设置安全管理器        bean.setSecurityManager(manager);                return bean;    &#125;    //DafaultWebSecurityManager 2    @Bean(name = &quot;DefaultWebSecurityManager&quot;)                                                       //Qualifier  通过这个注解获取spring管理的 userRealm()方法    public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;userRealm&quot;) UserRealm userRealm)&#123;        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        securityManager.setRealm(userRealm);        return securityManager;    &#125;    //创建realm对象，需要自定义类  1    @Bean(name = &quot;userRealm&quot;)    public UserRealm userRealm()&#123;        return new UserRealm();    &#125;&#125;</code></pre><h2 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截"></a>登录拦截</h2><ul><li>设置登录拦截，以及登录页面</li></ul><pre><code> @Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;DefaultWebSecurityManager&quot;) DefaultWebSecurityManager manager)&#123;        ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();        //设置安全管理器        bean.setSecurityManager(manager);        //添加shiro的内置过滤器        /**         * anon:无需认证就可以访问         * authc:必须认证才能用         * user:必须拥有记住我功能才能使用         * perms:拥有对某个资源的权限才能访问         * role:拥有某个角色权限才能访问         */        Map&lt;String,String&gt; filterMap = new LinkedHashMap&lt;&gt;();//        filterMap.put(&quot;/user/add&quot;,&quot;authc&quot;);//        filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;);//        上面两种写法等效于   可以采用通配符        filterMap.put(&quot;/user/*&quot;,&quot;authc&quot;);        bean.setFilterChainDefinitionMap(filterMap);        //如果没有权限        bean.setLoginUrl(&quot;/tologin&quot;);        return bean;    &#125;</code></pre><h2 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h2><ul><li><p>创建登录页面</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript"><p th:text="$&#123;msg&#125;" style="color: red"></p><form th:action="@&#123;/login&#125;">    <p>用户名：<input type="text" name="username"></p>    <p>密码：<input type="text" name="password"></p>    <p><input type="submit"></p></form><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>登录方法</p><pre><code>  @RequestMapping(&quot;/login&quot;)    public String login(String username,String password,Model model)&#123;        //获取当前的用户        Subject subject = SecurityUtils.getSubject();        //封装用户的登录数据        UsernamePasswordToken token = new UsernamePasswordToken(username, password);        try &#123;            subject.login(token); //执行登录方法  如果没有异常就说明登录成功            return &quot;index&quot;;        &#125;catch (UnknownAccountException e)&#123; //用户名不存在            model.addAttribute(&quot;msg&quot;,&quot;用户名不存在&quot;);            return &quot;login&quot;;        &#125;catch (IncorrectCredentialsException e)&#123;//密码错误异常            model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);            return &quot;login&quot;;        &#125;    &#125;</code></pre></li><li><p>官方举例的常见的异常类型</p><pre><code> try &#123;    currentUser.login( token );    //if no exception, that&#39;s it, we&#39;re done!&#125; catch ( UnknownAccountException uae ) &#123;  //用户名不存在    //username wasn&#39;t in the system, show them an error message?&#125; catch ( IncorrectCredentialsException ice ) &#123;  //密码错误    //password didn&#39;t match, try again?&#125; catch ( LockedAccountException lae ) &#123;   //账号被锁    //account for that username is locked - can&#39;t login.  Show them a message?&#125;    ... more types exceptions to check if you want ...&#125; catch ( AuthenticationException ae ) &#123;     //unexpected condition - error?&#125;</code></pre></li><li><p>登录认证，<code>这里采用假的用户名和密码进行测试</code></p><pre><code>  //认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        System.out.println(&quot;执行了认证》doGetAuthenticationInfo&quot;);        //获取当前的用户        Subject subject = SecurityUtils.getSubject();        //用户名，密码        String name = &quot;root&quot;;        String password = &quot;123&quot;;        UsernamePasswordToken userToken = (UsernamePasswordToken) token;        if (!userToken.getUsername().equals(name))&#123;            return null; //抛出异常，UnknownAccountException 用户名不存在异常        &#125;        //密码认证  shiro自己做        return new SimpleAuthenticationInfo(&quot;&quot;,password,&quot;root&quot;);    &#125;</code></pre></li><li><p>当输入用户名不存在时<br><img src="https://img-blog.csdnimg.cn/20210606162823827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="用户名不存在"></p></li><li><p>测试用户名密码不正确<br><img src="https://img-blog.csdnimg.cn/20210606162900548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="密码错误"></p></li><li><p>测试成功结果<br><img src="https://img-blog.csdnimg.cn/20210606162926812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="测试成功结果"></p></li></ul><h2 id="连接数据库进行操作"><a href="#连接数据库进行操作" class="headerlink" title="连接数据库进行操作"></a>连接数据库进行操作</h2><ul><li><p>采用MybatisPlus对数据库进行查询</p></li><li><p>数据库表设置Users<br><img src="https://img-blog.csdnimg.cn/20210606170713458.png" alt="数据库表"></p></li><li><p>修改认证方法</p><pre><code>  //认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        System.out.println(&quot;执行了认证》doGetAuthenticationInfo&quot;);        //获取当前的用户        Subject subject = SecurityUtils.getSubject();        UsernamePasswordToken userToken = (UsernamePasswordToken) token;        //从数据库中查询用户名，密码        Users byUsername = usersService.findByUsername(userToken.getUsername());        if (byUsername==null)&#123;            return null;  //抛出用户不存在异常        &#125;        //密码认证  shiro自己做        return new SimpleAuthenticationInfo(&quot;&quot;,byUsername.getPwd(),&quot;root&quot;);    &#125;</code></pre></li></ul><h2 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h2><pre><code>@RequestMapping(&quot;/logout&quot;)    public String logout()&#123;        //获取当前的用户        Subject subject = SecurityUtils.getSubject();//        设置退出登录        subject.logout();        return &quot;login&quot;;    &#125;</code></pre><h2 id="权限操作"><a href="#权限操作" class="headerlink" title="权限操作"></a>权限操作</h2><ul><li><p>给数据库表添加权限字段<br><img src="https://img-blog.csdnimg.cn/20210606181049434.png" alt="数据库表"></p></li><li><p>设置页面权限</p><pre><code> //授权 ,没有权限会跳转到位置页面        filterMap.put(&quot;/user/add&quot;,&quot;perms[user:add]&quot;);        filterMap.put(&quot;/user/update&quot;,&quot;perms[user:update]&quot;);</code></pre><p> <strong>注意这里的设置权限的代码需要放在设置拦截之前才有效</strong></p></li><li><p>从数据库中查询用户权限，赋予权限</p></li></ul><pre><code>  //授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;        System.out.println(&quot;执行了授权=》doGetAuthorizationInfo&quot;);        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();        //获取当前登录用户        Subject subject = SecurityUtils.getSubject();        Users currentUser = (Users) subject.getPrincipal();//拿到User对象        //从数据库中获取当前的权限，然后赋予当前用户的权限        info.addStringPermission(currentUser.getPerms());        return info;    &#125;</code></pre><ul><li>演示</li></ul><p>[video(video-ojR2qGmz-1622977070277)(type-bilibili)(url-<a href="https://player.bilibili.com/player.html?aid=973483603)(image-https://ss.csdn.net/p?http://i1.hdslb.com/bfs/archive/1a4f7ee1e155c87ce249ff6f6982278160a880d1.jpg)(title-shiro%E6%9D%83%E9%99%90%E6%BC%94%E7%A4%BA)%5D">https://player.bilibili.com/player.html?aid=973483603)(image-https://ss.csdn.net/p?http://i1.hdslb.com/bfs/archive/1a4f7ee1e155c87ce249ff6f6982278160a880d1.jpg)(title-shiro权限演示)]</a></p><h2 id="shiro与thymeleaf整合"><a href="#shiro与thymeleaf整合" class="headerlink" title="shiro与thymeleaf整合"></a>shiro与thymeleaf整合</h2><ul><li><p>实现目标</p><p> 实现root用户登录之后只能看到add按钮<br> lisi用户登录之后只能看见update按钮</p></li><li><p>导包</p><pre><code>&lt;!--        shiro-thymeleaf--&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt;        &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt;        &lt;version&gt;2.0.0&lt;/version&gt;    &lt;/dependency&gt;</code></pre></li><li><p>在ShiroConfig中加入新配置</p><pre><code> //整合ShiroDialect:用于整合Thymeleaf和shiro    @Bean    public ShiroDialect getShiroDialect()&#123;        return new ShiroDialect();    &#125;</code></pre></li><li><p>在html中引入命名空间</p><pre><code> &lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;      xmlns:shiro=&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;&gt;</code></pre></li><li><p>html代码</p><pre><code> &lt;h1&gt;首页&lt;/h1&gt;&lt;a th:href=&quot;@&#123;/tologin&#125;&quot;&gt;登录&lt;/a&gt;&lt;hr&gt;&lt;div shiro:hasPermission=&quot;user:add&quot;&gt;&lt;a th:href=&quot;@&#123;/user/add&#125;&quot;&gt;add&lt;/a&gt;&lt;/div&gt;|&lt;div shiro:hasPermission=&quot;user:update&quot;&gt;    &lt;a th:href=&quot;@&#123;/user/update&#125;&quot;&gt;update&lt;/a&gt;&lt;/div&gt;</code></pre></li><li><p>结果<br><img src="https://img-blog.csdnimg.cn/20210606184344519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="结果"></p></li></ul><h3 id="登陆之后隐藏登录按钮"><a href="#登陆之后隐藏登录按钮" class="headerlink" title="登陆之后隐藏登录按钮"></a>登陆之后隐藏登录按钮</h3><ul><li>第一种方法使用shiro标签</li></ul><pre><code> &lt;div shiro:guest=&quot;true&quot;&gt;&lt;a th:href=&quot;@&#123;/tologin&#125;&quot;&gt;登录&lt;/a&gt;&lt;/div&gt;</code></pre><ul><li>第二种方法设置session</li></ul><pre><code>   //获取登录对象        Subject subject = SecurityUtils.getSubject();        Session session = subject.getSession();        session.setAttribute(&quot;loginUser&quot;,byUsername);</code></pre><p>前端页面</p><pre><code>&lt;div th:if=&quot;session.loginUser==null&quot;&gt;&lt;a th:href=&quot;@&#123;/tologin&#125;&quot;&gt;登录&lt;/a&gt;&lt;/div&gt;</code></pre><ul><li>显示效果<br><img src="https://img-blog.csdnimg.cn/20210606185114673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="显示效果"></li></ul><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://gitee.com/godchin/springboot_shiro">码云地址</a><br>如果帮到了你，请个start支持下</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程创建方式以及线程安全</title>
      <link href="/2021/05/12/java-duo-xian-cheng-chuang-jian-fang-shi-yi-ji-xian-cheng-an-quan/"/>
      <url>/2021/05/12/java-duo-xian-cheng-chuang-jian-fang-shi-yi-ji-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><ul><li>线程被称为轻量级进程，是程序执行的最小单位，它是指在程序执行过程中，能够执行代码的一个执行单位。每个程序程序都至少有一个线程，也即是程序本身。</li></ul><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><ul><li><code>新建（New）</code>：创建后尚未启动的线程处于这种状态</li><li><code>运行（Runable）</code>：Runable包括了操作系统线程状态的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着CPU为它分配执行时间。</li><li><code>等待（Wating）</code>：处于这种状态的线程不会被分配CPU执行时间。等待状态又分为无限期等待和有限期等待，处于无限期等待的线程需要被其他线程显示地唤醒，没有设置Timeout参数的Object.wait()、没有设置Timeout参数的Thread.join()方法都会使线程进入无限期等待状态；有限期等待状态无须等待被其他线程显示地唤醒，在一定时间之后它们会由系统自动唤醒，Thread.sleep()、设置了Timeout参数的Object.wait()、设置了Timeout参数的Thread.join()方法都会使线程进入有限期等待状态。</li><li><code>阻塞（Blocked）</code>：线程被阻塞了，“阻塞状态”与”等待状态“的区别是：”阻塞状态“在等待着获取到一个排他锁，这个时间将在另外一个线程放弃这个锁的时候发生；而”等待状态“则是在等待一段时间或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</li><li><code>结束（Terminated）</code>：已终止线程的线程状态，线程已经结束执行。<br><img src="https://img-blog.csdnimg.cn/20210511133223945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="线程的生命周期"></li></ul><h2 id="多线程创建方法"><a href="#多线程创建方法" class="headerlink" title="多线程创建方法"></a>多线程创建方法</h2><h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author GocChin * @Date 2021/5/11 11:56 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: */</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"运行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：运行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现Runable接口创建多线程"><a href="#实现Runable接口创建多线程" class="headerlink" title="实现Runable接口创建多线程"></a>实现Runable接口创建多线程</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author GocChin * @Date 2021/5/11 12:37 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: 实现Runable接口的方式创建多线程 * 1.创建一个实现了Runable接口的类 * 2.实现类去实现Runable中的抽象方法，run(); * 3.创建实现类的对象 * 4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象 * 5.通过Thread类的对象调用start() */</span><span class="token keyword">class</span> <span class="token class-name">MThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.创建实现类的对象</span>        MThread mThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> Thread和Runable创建多线程对比</p><pre><code> 开发中：优先使用Runable 1.实现的方式没有类的单继承的局限性。2.实现的方式跟适合处理多个线程有共享数据的情况。联系：Thread类中也实现了Runable，两种方式都需要重写run()。</code></pre><h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><pre class="line-numbers language-coffeescript"><code class="language-coffeescript">import java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span>import java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span>import java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> <span class="token class-member variable">@Author</span> GocChin <span class="token operator">*</span> <span class="token class-member variable">@Date</span> <span class="token number">2021</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">11</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">03</span> <span class="token operator">*</span> @<span class="token property">Blog</span><span class="token punctuation">:</span> itdfq<span class="token punctuation">.</span>com <span class="token operator">*</span> @<span class="token property">QQ</span><span class="token punctuation">:</span> <span class="token number">909256107</span> <span class="token operator">*</span> @<span class="token property">Descript</span><span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">class</span> <span class="token class-name">MCallable</span> implements <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token class-member variable">@Override</span>    public Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        int sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            sum<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>public <span class="token keyword">class</span> <span class="token class-name">CallableTest</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    public static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token operator">/</span><span class="token operator">/</span>执行Callable 方式，需要FutureTask 实现实现，用于接收运算结果        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerFutureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>integerFutureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span>接受线程运算后的结果        Integer integer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            integer <span class="token operator">=</span> integerFutureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; catch (InterruptedException e) &amp;#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; catch (ExecutionException e) &amp;#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与Runable相比，Callable功能更强大</p><pre><code>相比run()方法可以有返回值方法可以抛出异常支持泛型的返回值需要借助FutureTask类，比如获取返回结果</code></pre><h3 id="使用线程池进行创建"><a href="#使用线程池进行创建" class="headerlink" title="使用线程池进行创建"></a>使用线程池进行创建</h3><p> <strong>线程池创建的好处</strong></p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理：<ul><li>corePoolSize:核心线程池的大小</li><li>maximumPoolSize:最大线程数</li><li>keepAliveTime:线程没有任务时最多保持多长时间后悔中止</li></ul></li></ul><pre class="line-numbers language-coffeescript"><code class="language-coffeescript">import java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span>import java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> <span class="token class-member variable">@Author</span> GocChin <span class="token operator">*</span> <span class="token class-member variable">@Date</span> <span class="token number">2021</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">11</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token operator">*</span> @<span class="token property">Blog</span><span class="token punctuation">:</span> itdfq<span class="token punctuation">.</span>com <span class="token operator">*</span> @<span class="token property">QQ</span><span class="token punctuation">:</span> <span class="token number">909256107</span> <span class="token operator">*</span> @<span class="token property">Descript</span><span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">class</span> <span class="token class-name">Thread1</span> implements <span class="token class-name">Runnable</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token class-member variable">@Override</span>    public void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>public <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    public static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token operator">/</span><span class="token operator">/</span>创建线程池        ExecutorService executorService<span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread1 threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token operator">/</span><span class="token operator">/</span>为线程池分配任务            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>threadPool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">/</span><span class="token operator">/</span>关闭线程池        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Thread中的常用方法"><a href="#Thread中的常用方法" class="headerlink" title="Thread中的常用方法"></a>Thread中的常用方法</h2><ul><li>start()：启动当前线程；调用当前线程的run();</li><li>run()：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中。</li><li>currentThread()：静态方法，返回当前代码的线程。</li><li>getName()：获取当前线程的名字。</li><li>setName()：设置当前线程的名字。</li><li>yield()：释放当前cpu的执行权，切换线程执行。</li><li>join()：在线程a中调用线程b的join(),此时线程a会进入阻塞状态，知道线程b完全执行完毕，线程a 才结束阻塞状态。</li><li>stop()：强制线程生命期结束。（过时了，不建议使用）</li><li>isAlive()：判断线程是否还活着。</li><li>sleep(long millitime)：让当前线程睡眠指定的事milltime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li></ul><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><h5 id="线程的优先级等级"><a href="#线程的优先级等级" class="headerlink" title="线程的优先级等级"></a>线程的优先级等级</h5><ul><li>MAX_PRIORITY:10</li><li>MIN_PRIORITY:1</li><li>NORM_PRIORITY:5</li></ul><h5 id="涉及的方法"><a href="#涉及的方法" class="headerlink" title="涉及的方法"></a>涉及的方法</h5><ul><li>getPriority()：返回线程的优先值</li><li>setPriority(int newPriority)：改变线程的优先级</li></ul><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><ul><li>线程创建时继承父线程的优先级</li><li>低优先级知识获得调度的概率低，并非一定是在高优先级线程之后才被调用</li></ul><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><p><img src="https://img-blog.csdnimg.cn/20210511133641454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="问题"></p><h3 id="多线程卖票"><a href="#多线程卖票" class="headerlink" title="多线程卖票"></a>多线程卖票</h3><p>基于实现Runable的方式实现多线程买票</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> demo2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author GocChin * @Date 2021/5/11 13:37 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: 创建三个窗口买票，总票数为100张，使用Runable接口的方式 *      存在线程安全问题，待解决 */</span><span class="token keyword">class</span> <span class="token class-name">Thread2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread2 thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现结果，存在重复的票<br><img src="https://img-blog.csdnimg.cn/20210511134337217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="实现结果"><br>如果在买票方法中加入sleep函数</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则运行结果可能会出现-1，表示也是不正常的<br><img src="https://img-blog.csdnimg.cn/2021051113481650.png" alt="出现-1的结果"></p><p>理想情况<img src="https://img-blog.csdnimg.cn/20210511135148558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="卖票理想状态"><br>极端情况<br><img src="https://img-blog.csdnimg.cn/20210511135322506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="极端情况"><br><strong>在java中，我们通过同步机制，来解决线程的安全问题。</strong></p><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明</p><ul><li>操作共享数据的代码就是需要被同步的代码。</li><li>共享数据：多个线程共同操作的变量，比如本题中的ticket就是共享数据。</li><li>同步监视器：俗称：锁。任何一个类的对象都可以充当锁。要求：<code>多个线程必须要共用统一把锁</code>。</li><li>同步的方式，解决了线程的安全问题—好处。但是操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。—–局限性</li><li>使用Runable接口创建多线程的方式中，可以使用<code>this</code>关键字；在继承Thread类中创建多线程中，慎用<code>this</code>充当同步监视器，可以考虑使用当前类充当同步监视器。<code>Class clazz = Windows.class</code>    因此 类也是一个对象</li><li>包裹操作共享数据的代码 <code>不能多也不能少</code></li></ul><p><strong>修改之后的代码：</strong></p><pre class="line-numbers language-coffeescript"><code class="language-coffeescript">package demo2<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> <span class="token class-member variable">@Author</span> GocChin <span class="token operator">*</span> <span class="token class-member variable">@Date</span> <span class="token number">2021</span><span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">11</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">37</span> <span class="token operator">*</span> @<span class="token property">Blog</span><span class="token punctuation">:</span> itdfq<span class="token punctuation">.</span>com <span class="token operator">*</span> @<span class="token property">QQ</span><span class="token punctuation">:</span> <span class="token number">909256107</span> <span class="token operator">*</span> @<span class="token property">Descript</span><span class="token punctuation">:</span> 创建三个窗口买票，总票数为<span class="token number">100</span>张，使用Runable接口的方式 <span class="token operator">*</span>      存在线程安全问题，待解决 <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">class</span> <span class="token class-name">Thread2</span> implements <span class="token class-name">Runnable</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    private  int ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-member variable">@Override</span>    public void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token function">synchronized</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; //括号中的内容可以直接使用当前对象this去充当</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; catch (InterruptedException e) &amp;#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>public <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    public static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        Thread2 thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong><br><img src="https://img-blog.csdnimg.cn/20210511140703443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="运行结果"><br><strong>继承Thread的方式，去使用同步代码块，需要将声明的锁对象设为statci，否则创建的对象的同步监视器不唯一，就无法实现。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> demo2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author GocChin * @Date 2021/5/11 14:45 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: */</span><span class="token keyword">class</span> <span class="token class-name">WindowsTest2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span>   Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里不能使用this去充当，可以直接写一个Test.class   类也是对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":买票，票号为："</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">Test2</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        WindowsTest2 w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WindowsTest2 w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WindowsTest2 w3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>如果操作共享数据的代码<code>完整的声明在一个方法</code>中，可以将此方法声明为同步的。</p><hr><p>通过实现Runable的方式实现同步方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> demo2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author GocChin * @Date 2021/5/11 13:37 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: 创建三个窗口买票，总票数为100张，使用Runable接口的方式 * 存在线程安全问题，待解决 */</span><span class="token keyword">class</span> <span class="token class-name">Thread3</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread3 thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread3<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread3<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread3<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过实现继承Thread的方式实现同步方法。使用的同步监视器是this，则不唯一，就会报错。所以将该方法定义为static。当前的同步换时期就变成<code>Test4.class</code>了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> demo2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author GocChin * @Date 2021/5/11 14:45 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: */</span><span class="token keyword">class</span> <span class="token class-name">WindowsTest4</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span>   Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步监视器不是this了，而是当前的类</span><span class="token comment" spellcheck="true">//    public synchronized void show()&amp;#123;//同步监视器是this  ，t1,t2,t3</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":买票，票号为："</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">Test4</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        WindowsTest4 w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsTest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WindowsTest4 w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsTest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WindowsTest4 w3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsTest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>总结</p><ul><li>同步方法仍然设计到同步监视器，只是不需要我们去显示的声明。</li><li>非静态的同步方法，同步监视器是：this静态的同步方法中，同步监视器是类本身。</li></ul><h3 id="Lock锁解决线程安全问题"><a href="#Lock锁解决线程安全问题" class="headerlink" title="Lock锁解决线程安全问题"></a>Lock锁解决线程安全问题</h3><hr><h4 id="synchronize与lock的异同"><a href="#synchronize与lock的异同" class="headerlink" title="synchronize与lock的异同"></a>synchronize与lock的异同</h4><p> 相同</p><ul><li>都可以解决线程安全问题</li></ul><p>不同</p><ul><li>synchronize机制在执行相应的同步代码以后，自动的释放同步监视器；Lock需要手动的启动同步lock(),同时结束同步也需要手动的实现unlock()。</li></ul><p>建议优先使用顺序<br>Lock——&gt;同步代码块（已经进入了方法体，分配了相应资源）—-&gt;同步方法（在方法体之外）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> demo2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author GocChin * @Date 2021/5/11 15:58 * @Blog: itdfq.com * @QQ: 909256107 * @Descript: */</span><span class="token keyword">class</span> <span class="token class-name">Lock1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.实例化</span>    <span class="token keyword">private</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.调用lock锁定方法</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"售票，票号为："</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3.调用解锁方法</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockTest1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Lock1 lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lock1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>lock1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>lock1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>lock1<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="/2021/04/18/linux-ming-ling/"/>
      <url>/2021/04/18/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<ul><li>查看防火墙开放端口</li></ul><pre><code>firewall-cmd --list-all</code></pre><ul><li>开放9000端口</li></ul><pre><code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code></pre><pre><code>命令含义：–zone #作用域–add-port=80/tcp #添加端口，格式为：端口/通讯协议–permanent #永久生效，没有此参数重启后失效firewall-cmd --reload 并不中断用户连接，即不丢失状态信息</code></pre><ul><li>重载防火墙</li></ul><pre><code>firewall-cmd --reload</code></pre>]]></content>
      
      
      <categories>
          
          <category> cmd命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Minio存储服务器</title>
      <link href="/2021/04/18/docker-an-zhuang-minio-cun-chu-fu-wu-qi/"/>
      <url>/2021/04/18/docker-an-zhuang-minio-cun-chu-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="拉取镜像的命令"><a href="#拉取镜像的命令" class="headerlink" title="拉取镜像的命令"></a>拉取镜像的命令</h3><pre><code>docker pull minio/minio</code></pre><h3 id="自定义安装"><a href="#自定义安装" class="headerlink" title="自定义安装"></a>自定义安装</h3><pre><code> docker run -p 9000:9000 --name minio -d --restart=always -e &quot;MINIO_ACCESS_KEY=root&quot; -e &quot;MINIO_SECRET_KEY=root&quot; -v /home/data:/data -v /home/config:/root/.minio minio/minio server /data</code></pre><h3 id="查看安装logs信息"><a href="#查看安装logs信息" class="headerlink" title="查看安装logs信息"></a>查看安装logs信息</h3><pre><code>docker logs ea407f64546c（容器id）</code></pre><p><img src="https://img-blog.csdnimg.cn/20210417204843917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="打开浏览器输入地址进行登录"><a href="#打开浏览器输入地址进行登录" class="headerlink" title="打开浏览器输入地址进行登录"></a>打开浏览器输入地址进行登录</h3><pre><code>http://192.168.1.133:9000</code></pre><p><img src="https://img-blog.csdnimg.cn/20210417204945244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie   &amp;&amp; Session   &amp;&amp; JSP：入门学习笔记</title>
      <link href="/2020/11/27/cookie-session-jsp-ru-men-xue-xi-bi-ji/"/>
      <url>/2020/11/27/cookie-session-jsp-ru-men-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><pre><code>1. 会话：一次会话中包含多次请求和响应。    * 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止2. 功能：在一次会话的范围内的多次请求间，共享数据3. 方式：    1. 客户端会话技术：Cookie    2. 服务器端会话技术：Session</code></pre><h2 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h2><pre><code>1. 概念：客户端会话技术，将数据保存到客户端2. 快速入门：    * 使用步骤：        1. 创建Cookie对象，绑定数据            * new Cookie(String name, String value)         2. 发送Cookie对象            * response.addCookie(Cookie cookie)         3. 获取Cookie，拿到数据            * Cookie[]  request.getCookies()  3. 实现原理    * 基于响应头set-cookie和请求头cookie实现4. cookie的细节    1. 一次可不可以发送多个cookie?        * 可以        * 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。    2. cookie在浏览器中保存多长时间？        1. 默认情况下，当浏览器关闭后，Cookie数据被销毁        2. 持久化存储：            * setMaxAge(int seconds)                1. 正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效                2. 负数：默认值                3. 零：删除cookie信息    3. cookie能不能存中文？        * 在tomcat 8 之前 cookie中不能直接存储中文数据。            * 需要将中文数据转码---一般采用URL编码(%E3)        * 在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析    4. cookie共享问题？        1. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？            * 默认情况下cookie不能共享            * setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录                * 如果要共享，则可以将path设置为&quot;/&quot;                2. 不同的tomcat服务器间cookie共享问题？            * setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享                * setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享        5. Cookie的特点和作用    1. cookie存储数据在客户端浏览器    2. 浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)    * 作用：        1. cookie一般用于存出少量的不太敏感的数据        2. 在不登录的情况下，完成服务器对客户端的身份识别6. 案例：记住上一次访问时间    1. 需求：        1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。        2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串    2. 分析：        1. 可以采用Cookie来完成        2. 在服务器中的Servlet判断是否有一个名为lastTime的cookie            1. 有：不是第一次访问                1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20                2. 写回Cookie：lastTime=2018年6月10日11:50:01            2. 没有：是第一次访问                1. 响应数据：您好，欢迎您首次访问                2. 写回Cookie：lastTime=2018年6月10日11:50:01    3. 代码实现：        package cn.itcast.cookie;        import javax.servlet.ServletException;        import javax.servlet.annotation.WebServlet;        import javax.servlet.http.Cookie;        import javax.servlet.http.HttpServlet;        import javax.servlet.http.HttpServletRequest;        import javax.servlet.http.HttpServletResponse;        import java.io.IOException;        import java.net.URLDecoder;        import java.net.URLEncoder;        import java.text.SimpleDateFormat;        import java.util.Date;    @WebServlet(&quot;/cookieTest&quot;)    public class CookieTest extends HttpServlet &#123;        protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;            //设置响应的消息体的数据格式以及编码            response.setContentType(&quot;text/html;charset=utf-8&quot;);                //1.获取所有Cookie            Cookie[] cookies = request.getCookies();            boolean flag = false;//没有cookie为lastTime            //2.遍历cookie数组            if(cookies != null &amp;&amp; cookies.length &gt; 0)&#123;                for (Cookie cookie : cookies) &#123;                    //3.获取cookie的名称                    String name = cookie.getName();                    //4.判断名称是否是：lastTime                    if(&quot;lastTime&quot;.equals(name))&#123;                        //有该Cookie，不是第一次访问                            flag = true;//有lastTime的cookie                            //设置Cookie的value                        //获取当前时间的字符串，重新设置Cookie的值，重新发送cookie                        Date date  = new Date();                        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);                        String str_date = sdf.format(date);                        System.out.println(&quot;编码前：&quot;+str_date);                        //URL编码                        str_date = URLEncoder.encode(str_date,&quot;utf-8&quot;);                        System.out.println(&quot;编码后：&quot;+str_date);                        cookie.setValue(str_date);                        //设置cookie的存活时间                        cookie.setMaxAge(60 * 60 * 24 * 30);//一个月                        response.addCookie(cookie);                                //响应数据                        //获取Cookie的value，时间                        String value = cookie.getValue();                        System.out.println(&quot;解码前：&quot;+value);                        //URL解码：                        value = URLDecoder.decode(value,&quot;utf-8&quot;);                        System.out.println(&quot;解码后：&quot;+value);                        response.getWriter().write(&quot;&lt;h1&gt;欢迎回来，您上次访问时间为:&quot;+value+&quot;&lt;/h1&gt;&quot;);                            break;                        &#125;                &#125;            &#125;                    if(cookies == null || cookies.length == 0 || flag == false)&#123;                //没有，第一次访问                    //设置Cookie的value                //获取当前时间的字符串，重新设置Cookie的值，重新发送cookie                Date date  = new Date();                SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);                String str_date = sdf.format(date);                System.out.println(&quot;编码前：&quot;+str_date);                //URL编码                str_date = URLEncoder.encode(str_date,&quot;utf-8&quot;);                System.out.println(&quot;编码后：&quot;+str_date);                    Cookie cookie = new Cookie(&quot;lastTime&quot;,str_date);                //设置cookie的存活时间                cookie.setMaxAge(60 * 60 * 24 * 30);//一个月                response.addCookie(cookie);                    response.getWriter().write(&quot;&lt;h1&gt;您好，欢迎您首次访问&lt;/h1&gt;&quot;);            &#125;                &#125;            protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;            this.doPost(request, response);        &#125;    &#125;</code></pre><h2 id="JSP：入门学习-1"><a href="#JSP：入门学习-1" class="headerlink" title="JSP：入门学习  1"></a>JSP：入门学习  1</h2><pre><code>1. 概念：    * Java Server Pages： java服务器端页面        * 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码        * 用于简化书写！！！2. 原理    * JSP本质上就是一个Servlet3. JSP的脚本：JSP定义Java代码的方式    1. &lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。    2. &lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。    3. &lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。4. JSP的内置对象：    * 在jsp页面中不需要获取和创建，可以直接使用的对象    * jsp一共有9个内置对象。    * 今天学习3个：        * request        * response        * out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似            * response.getWriter()和out.write()的区别：                * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。                * response.getWriter()数据输出永远在out.write()之前</code></pre><h2 id="JSP：入门学习-2"><a href="#JSP：入门学习-2" class="headerlink" title="JSP：入门学习 2"></a>JSP：入门学习 2</h2><pre><code>1. 指令        * 作用：用于配置JSP页面，导入资源文件        * 格式：            &lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;        * 分类：            1. page： 配置JSP页面的                * contentType：等同于response.setContentType()                    1. 设置响应体的mime类型以及字符集                    2. 设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）                * import：导包                * errorPage：当前页面发生异常后，会自动跳转到指定的错误页面                * isErrorPage：标识当前也是是否是错误页面。                    * true：是，可以使用内置对象exception                    * false：否。默认值。不可以使用内置对象exception            2. include： 页面包含的。导入页面的资源文件                * &lt;%@include file=&quot;top.jsp&quot;%&gt;            3. taglib： 导入资源                * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;                    * prefix：前缀，自定义的2. 注释:    1. html注释：        &lt;!-- --&gt;:只能注释html代码片段    2. jsp注释：推荐使用        &lt;%-- --%&gt;：可以注释所有3. 内置对象    * 在jsp页面中不需要创建，直接使用的对象    * 一共有9个：            变量名真实类型作用        * pageContextPageContext当前页面共享数据，还可以获取其他八个内置对象        * requestHttpServletRequest一次请求访问的多个资源(转发)        * sessionHttpSession一次会话的多个请求间        * applicationServletContext所有用户间共享数据        * responseHttpServletResponse响应对象        * pageObject当前页面(Servlet)的对象  this        * outJspWriter输出对象，数据输出到页面上        * configServletConfigServlet的配置对象        * exceptionThrowable异常对象</code></pre><h2 id="Session：主菜"><a href="#Session：主菜" class="headerlink" title="Session：主菜"></a>Session：主菜</h2><pre><code>1. 概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession2. 快速入门：    1. 获取HttpSession对象：        HttpSession session = request.getSession();    2. 使用HttpSession对象：        Object getAttribute(String name)          void setAttribute(String name, Object value)        void removeAttribute(String name)  3. 原理    * Session的实现是依赖于Cookie的。4. 细节：    1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？        * 默认情况下。不是。        * 如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。             Cookie c = new Cookie(&quot;JSESSIONID&quot;,session.getId());             c.setMaxAge(60*60);             response.addCookie(c);    2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？        * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作            * session的钝化：                * 在服务器正常关闭之前，将session对象系列化到硬盘上            * session的活化：                * 在服务器启动后，将session文件转化为内存中的session对象即可。                3. session什么时候被销毁？        1. 服务器关闭        2. session对象调用invalidate() 。        3. session默认失效时间 30分钟            选择性配置修改            &lt;session-config&gt;                &lt;session-timeout&gt;30&lt;/session-timeout&gt;            &lt;/session-config&gt; 5. session的特点     1. session用于存储一次会话的多次请求的数据，存在服务器端     2. session可以存储任意类型，任意大小的数据    * session与Cookie的区别：        1. session存储数据在服务器端，Cookie在客户端        2. session没有数据大小限制，Cookie有        3. session数据安全，Cookie相对于不安全</code></pre><h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h2><pre><code>1. 案例需求：    1. 访问带有验证码的登录页面login.jsp    2. 用户输入用户名，密码以及验证码。        * 如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误        * 如果验证码输入有误，跳转登录页面，提示：验证码错误        * 如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您2. 代码实现：                package cn.itcast.Login;</code></pre><p>import javax.imageio.ImageIO;<br>import javax.servlet.ServletException;<br>import javax.servlet.annotation.WebServlet;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.awt.*;<br>import java.awt.image.BufferedImage;<br>import java.io.IOException;<br>import java.util.Random;</p><p>@WebServlet(“&#x2F;CheckCodeServlet”)<br>public class CheckCodeServlet extends HttpServlet {<br>    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br>        int width &#x3D; 150;<br>        int height &#x3D; 60;</p><pre><code>    //1.创建一对象，在内存中图片(验证码图片对象)    BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);    //2.美化图片    //2.1 填充背景色    Graphics g = image.getGraphics();//画笔对象    g.setColor(Color.PINK);//设置画笔颜色    g.fillRect(0,0,width,height);    //2.2画边框    g.setColor(Color.BLUE);    g.drawRect(0,0,width - 1,height - 1);    String str = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&quot;;    //生成随机角标    Random ran = new Random();    StringBuilder sb = new StringBuilder();    for (int i = 1; i &lt;= 4; i++) &#123;        int index = ran.nextInt(str.length());        //获取字符        char ch = str.charAt(index);//随机字符        sb.append(ch);        //2.3写验证码        g.drawString(ch+&quot;&quot;,width/5*i,height/2);    &#125;    String checkCode_session = sb.toString();    request.getSession().setAttribute(&quot;checkCode_session&quot;,checkCode_session);    //2.4画干扰线    g.setColor(Color.GREEN);    //随机生成坐标点    for (int i = 0; i &lt; 10; i++) &#123;        int x1 = ran.nextInt(width);        int x2 = ran.nextInt(width);        int y1 = ran.nextInt(height);        int y2 = ran.nextInt(height);        g.drawLine(x1,y1,x2,y2);    &#125;    //3.将图片输出到页面展示    ImageIO.write(image,&quot;jpg&quot;,response.getOutputStream());&#125;protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;    this.doPost(request, response);&#125;</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Cookie&amp;Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式&amp;&amp; JSTL</title>
      <link href="/2020/11/27/el-biao-da-shi-jstl/"/>
      <url>/2020/11/27/el-biao-da-shi-jstl/</url>
      
        <content type="html"><![CDATA[<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><pre><code>1. 概念：Expression Language 表达式语言2. 作用：替换和简化jsp页面中java代码的编写3. 语法：$&#123;表达式&#125;4. 注意：    * jsp默认支持el表达式的。如果要忽略el表达式        1. 设置jsp中page指令中：isELIgnored=&quot;true&quot; 忽略当前jsp页面中所有的el表达式        2. \$&#123;表达式&#125; ：忽略当前这个el表达式5. 使用：    1. 运算：        * 运算符：            1. 算数运算符： + - * /(div) %(mod)            2. 比较运算符： &gt; &lt; &gt;= &lt;= == !=            3. 逻辑运算符： &amp;&amp;(and) ||(or) !(not)            4. 空运算符： empty                * 功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0                * $&#123;empty list&#125;:判断字符串、集合、数组对象是否为null或者长度为0                * $&#123;not empty str&#125;:表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0    2. 获取值        1. el表达式只能从域对象中获取值        2. 语法：            1. $&#123;域名称.键名&#125;：从指定域中获取指定键的值                * 域名称：                    1. pageScope--&gt; pageContext                    2. requestScope --&gt; request                    3. sessionScope --&gt; session                    4. applicationScope --&gt; application（ServletContext）                * 举例：在request域中存储了name=张三                * 获取：$&#123;requestScope.name&#125;            2. $&#123;键名&#125;：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。                                    3. 获取对象、List集合、Map集合的值                1. 对象：$&#123;域名称.键名.属性名&#125;                    * 本质上会去调用对象的getter方法                2. List集合：$&#123;域名称.键名[索引]&#125;                3. Map集合：                    * $&#123;域名称.键名.key名称&#125;                    * $&#123;域名称.键名[&quot;key名称&quot;]&#125;    3. 隐式对象：        * el表达式中有11个隐式对象        * pageContext：            * 获取jsp其他八个内置对象                * $&#123;pageContext.request.contextPath&#125;：动态获取虚拟目录                </code></pre><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><pre><code>1. 概念：JavaServer Pages Tag Library  JSP标准标签库    * 是由Apache组织提供的开源的免费的jsp标签&lt;标签&gt;2. 作用：用于简化和替换jsp页面上的java代码3. 使用步骤：    1. 导入jstl相关jar包    2. 引入标签库：taglib指令：  &lt;%@ taglib %&gt;    3. 使用标签4. 常用的JSTL标签    1. if:相当于java代码的if语句        1. 属性：            * test 必须属性，接受boolean表达式                * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容                * 一般情况下，test属性值会结合el表达式一起使用            2. 注意：        * c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签    2. choose:相当于java代码的switch语句        1. 使用choose标签声明         相当于switch声明        2. 使用when标签做判断         相当于case        3. 使用otherwise标签做其他情况的声明    相当于default    3. foreach:相当于java代码的for语句5. 练习：    * 需求：在request域中有一个存有User对象的List集合。需要使用jstl+el将list集合数据展示到jsp页面的表格table中</code></pre><h2 id="三层架构：软件设计架构"><a href="#三层架构：软件设计架构" class="headerlink" title="三层架构：软件设计架构"></a>三层架构：软件设计架构</h2><pre><code>1. 界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互2. 业务逻辑层：处理业务逻辑的。3. 数据访问层：操作数据存储文件。</code></pre><h2 id="案例：用户信息列表展示"><a href="#案例：用户信息列表展示" class="headerlink" title="案例：用户信息列表展示"></a>案例：用户信息列表展示</h2><pre><code>1. 需求：用户信息的增删改查操作2. 设计：    1. 技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat    2. 数据库设计：        create database day17; -- 创建数据库        use day17;    -- 使用数据库        create table user(   -- 创建表            id int primary key auto_increment,            name varchar(20) not null,            gender varchar(5),            age int,            address varchar(32),            qqvarchar(20),            email varchar(50)        );3. 开发：    1. 环境搭建        1. 创建数据库环境        2. 创建项目，导入需要的jar包    2. 编码4. 测试5. 部署运维</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> EL表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB基本操作</title>
      <link href="/2020/11/27/mongodb-ji-ben-cao-zuo/"/>
      <url>/2020/11/27/mongodb-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装MongoDB"><a href="#1-安装MongoDB" class="headerlink" title="1.安装MongoDB"></a>1.安装MongoDB</h1><pre><code>- 安装- 配置环境变量    C:\Program Files\MongoDB\Server\3.2\bin- 在c盘根目录    - 创建一个文件夹 data    - 在data中创建一个文件夹db    - 打开cmd命令行窗口    - 输入 mongod 启动mongodb服务器    - 32位注意：        启动服务器时，需要输入如下内容            mongod --storageEngine=mmapv1                        mongod --dbpath 数据库路径 --port 端口号    - 在打开一个cmd窗口    - 输入 mongo 连接mongodb ，出现 &gt;     - 数据库（database）    - 数据库的服务器        - 服务器用来保存数据        - mongod 用来启动服务器            - 数据库的客户端        - 客户端用来操作服务器，对数据进行增删改查的操作        - mongo 用来启动客户端                </code></pre><h4 id="将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动"><a href="#将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动" class="headerlink" title="将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动"></a>将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动</h4><pre><code>    1.在c盘根目录创建data        - 在data下创建db和log文件夹    2.创建配置文件        在目录 C:\Program Files\MongoDB\Server\3.2 下添加一个配置文件        mongod.cfg        内容如下：        systemLog:            destination: file            path: c:\data\log\mongod.log        storage:            dbPath: c:\data\db            3.以管理员的身份打开命令行窗口        4.执行如下的命令        sc.exe create MongoDB binPath= &quot;\&quot;C:\Program Files\MongoDB\Server\3.2\bin\mongod.exe\&quot; --service --config=\&quot;C:\Program Files\MongoDB\Server\3.2\mongod.cfg\&quot;&quot; DisplayName= &quot;MongoDB&quot; start= &quot;auto&quot;                sc.exe create MongoDB binPath= &quot;\&quot;mongod的bin目录\mongod.exe\&quot; --service --config=\&quot;mongo的安装目录\mongod.cfg\&quot;&quot; DisplayName= &quot;MongoDB&quot; start= &quot;auto&quot;            5.启动mongodb服务    6.如果启动失败，证明上边的操作有误，        在控制台输入 sc delete MongoDB 删除之前配置的服务        然后从第一步再来一次</code></pre><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><pre><code>    数据库（database）    集合（collection）    文档（document）        - 在MongoDB中，数据库和集合都不需要手动创建，            当我们创建文档时，如果文档所在的集合或数据库不存在会自动创建数据库和集合    - 基本指令    show dbs    show databases        - 显示当前的所有数据库    use 数据库名        - 进入到指定的数据库中    db        - db表示的是当前所处的数据库    show collections        - 显示数据库中所有的集合        - 数据库的CRUD（增删改查）的操作    - 向数据库中插入文档        db.&lt;collection&gt;.insert(doc)            - 向集合中插入一个文档            - 例子：向test数据库中的，stus集合中插入一个新的学生对象                &#123;name:&quot;孙悟空&quot;,age:18,gender:&quot;男&quot;&#125;                db.stus.insert(&#123;name:&quot;孙悟空&quot;,age:18,gender:&quot;男&quot;&#125;)                db.&lt;collection&gt;.find()            - 查询当前集合中的所有的文档                </code></pre><h2 id="MongoDB的基本的指令"><a href="#MongoDB的基本的指令" class="headerlink" title="MongoDB的基本的指令"></a>MongoDB的基本的指令</h2><pre><code>    - 启动服务器        mongod --dbpath 路径 --port 端口号            - 启动客户端        mongo    - MongoDB的CRUD的操作    - 基本操作        use 数据库            - 进入指定的数据库        show dbs            - 显示所有的数据库        show collections            - 显示数据库中所有的集合        db            - 显示当前所在的数据库    - 向数据库中插入文档        - db.collection.insert()            - insert()可以向集合中插入一个或多个文档        - db.collection.insertOne()            - 向集合中插入一个文档        - db.collection.insertMany()            - 向集合中插入多个文档                - 查询数据库中的文档        - db.collection.find()            - 可以根据指定条件从集合中查询所有符合条件的文档            - 返回的是一个数组        - db.collection.findOne()            - 查询第一个符合条件的文档            - 返回的是一个对象        - db.collection.find().count()            - 查询符合条件的文档的数量                - 修改数据库中的文档        - db.collection.update()            - 可以修改、替换集合中的一个或多个文档        - db.collection.updateOne()            - 修改集合中的一个文档        - db.collection.updateMany()            - 修改集合中的多个文档        - db.collection.replaceOne()            - 替换集合中的一个文档                - 删除集合中的文档        - db.collection.remove()            - 删除集合中的一个或多个文档（默认删除多个）        - db.collection.deleteOne()            - 删除集合中的一个文档        - db.collection.deleteMany()            - 删除集合中的多个文档        - 清空一个集合            db.collection.remove(&#123;&#125;)        - 删除一个集合            db.collection.drop()        - 删除一个数据库            db.dropDatabase()                                        </code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据库操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA字体异常修改方法</title>
      <link href="/2020/10/30/idea-zi-ti-yi-chang-xiu-gai-fang-fa/"/>
      <url>/2020/10/30/idea-zi-ti-yi-chang-xiu-gai-fang-fa/</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="IDEA字体设置过大，无法修改问题解决"><a href="#IDEA字体设置过大，无法修改问题解决" class="headerlink" title="IDEA字体设置过大，无法修改问题解决"></a>IDEA字体设置过大，无法修改问题解决</h1></li></ul><p><img src="https://img-blog.csdnimg.cn/20190330170144286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我不小心设置错误，把菜单字体设置为140，并且取消了鼠标滑轮控制大小我也找到了解决办法 如下图<br><img src="https://img-blog.csdnimg.cn/2019033017031836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> IDEA配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echart接收Ajax传递过来的json数据</title>
      <link href="/2020/09/22/echart-jie-shou-ajax-chuan-di-guo-lai-de-json-shu-ju/"/>
      <url>/2020/09/22/echart-jie-shou-ajax-chuan-di-guo-lai-de-json-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://img-blog.csdnimg.cn/20200918194249836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>前端代码</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;图形输出&lt;/title&gt;    &lt;script src=&quot;js/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;js/echarts.min.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;js/echarts.helper.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body onresize=&quot;myFunction()&quot;&gt;&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;&lt;div id=&quot;main&quot; style=&quot;width: 100%;height:400px;&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot;&gt;    function myFunction()&#123;        var w = window.outerHeight;        var h =window.outerHeight;    &#125;    var myChart = echarts.init(document.getElementById(&#39;main&#39;));    // 显示标题，图例和空的坐标轴    myChart.setOption(&#123;        title: &#123;            text: &#39;贪夜蛾自动检测&#39;        &#125;,        tooltip: &#123;            trigger: &#39;axis&#39;, //触发类型；轴触发，axis则鼠标hover到一条柱状图显示全部数据，item则鼠标hover到折线点显示相应数据，            axisPointer: &#123;  //坐标轴指示器，坐标轴触发有效，                type: &#39;line&#39;, //默认为line，line直线，cross十字准星，shadow阴影                crossStyle: &#123;                    color: &#39;#fff&#39;                &#125;            &#125;        &#125;,        legend: &#123;            data:[&#39;红外计数&#39;,&#39;PM2.5&#39;,&#39;温度&#39;,&#39;湿度&#39;]        &#125;,        xAxis: &#123;            boundaryGap: false,            data: []        &#125;,        grid: &#123;            left: &#39;3%&#39;,            right: &#39;4%&#39;,            bottom: &#39;3%&#39;,            containLabel: true        &#125;,        toolbox: &#123;            feature: &#123;                saveAsImage: &#123;&#125;            &#125;        &#125;,        yAxis: &#123;&#125;,        series: [&#123;            name: &#39;红外计数&#39;,            type: &#39;line&#39;,            data: []        &#125;,&#123;            name: &#39;PM2.5&#39;,            type: &#39;line&#39;,            data: []        &#125;,&#123;            name: &#39;温度&#39;,            type: &#39;line&#39;,            data: []        &#125;,&#123;            name: &#39;湿度&#39;,            type: &#39;line&#39;,            data: []        &#125;]    &#125;);    myChart.showLoading();    //数据加载完之前先显示一段简单的loading动画    var names=[];    //类别数组（实际用来盛放X轴坐标值）    var nums=[];    //销量数组（实际用来盛放Y坐标值）    var nums1=[];    var nums2=[];    var nums3=[];        $.ajax(&#123;        type : &quot;post&quot;,        async : true,            //异步请求（同步请求将会锁住浏览器，用户其他操作必须等待请求完成才可以执行）        url : &quot;/datass/selectAll&quot;,    //请求发送到TestServlet处        data : &#123;&#125;,        dataType : &quot;json&quot;,        //返回数据形式为json        success : function(result) &#123;            //请求成功时执行该函数内容，result即为服务器返回的json对象            if (result) &#123;                for(var i=0;i&lt;result.length;i++)&#123;                    names.push(result[i].nowtime);    //挨个取出类别并填入类别数组                &#125;                for(var i=0;i&lt;result.length;i++)&#123;                    nums.push(result[i].hongwai);    //挨个取出销量并填入销量数组                &#125;                for(var i=0;i&lt;result.length;i++)&#123;                    nums1.push(result[i].pm);                &#125;                for(var i=0;i&lt;result.length;i++)&#123;                    nums2.push(result[i].wendu);                    nums3.push(result[i].shidu);                &#125;                myChart.hideLoading();    //隐藏加载动画                myChart.setOption(&#123;        //加载数据图表                    xAxis: &#123;                        data: names                    &#125;,                    series: [&#123;                        // 根据名字对应到相应的系列                        name: &#39;红外计数&#39;,                        data: nums                    &#125;,&#123;                        name: &#39;PM2.5&#39;,                        data: nums1                    &#125;,&#123;                        name: &#39;温度&#39;,                        data: nums2                    &#125;,&#123;                        name: &#39;湿度&#39;,                        data: nums3                    &#125;]                &#125;);                myChart.setOption(option);                setTimeout(function ()&#123;                    window.onresize = function ()&#123;                        myChart.resize();                    &#125;                &#125;,200)            &#125;        &#125;,        error : function(errorMsg) &#123;            //请求失败时执行该函数            alert(&quot;图表请求数据失败!&quot;);            myChart.hideLoading();        &#125;    &#125;)    // window.onresize = myChart.resize();    // $(&quot;#main&quot;).resize(myChart.resize);    // myChart.setOption(option);    myChart.setOption(option);    setTimeout(function ()&#123;        window.onresize = function ()&#123;            myChart.resize();        &#125;    &#125;,200)&lt;/script&gt;&lt;/html&gt;</code></pre><p>后台传送json数据</p><pre><code> @RequestMapping(&quot;/selectAll&quot;)    @ApiOperation(&quot;查询所有&quot;)    public List&lt;Datas&gt; selectAll(Map map)&#123;        return datasService.selectAll(map);    &#125;</code></pre><p>前端接收的json数据</p><pre><code>[&#123;&quot;id&quot;:1,&quot;nowtime&quot;:&quot;2020-09-16 21:05:15&quot;,&quot;hongwai&quot;:12,&quot;fengxiang&quot;:&quot;南偏北风&quot;,&quot;fengsu&quot;:&quot;20.3&quot;,&quot;wendu&quot;:36.5,&quot;shidu&quot;:45.1,&quot;pm&quot;:52.3,&quot;tWendu10&quot;:34.2,&quot;tShidu10&quot;:32.1,&quot;tWendu20&quot;:30.5,&quot;tShidu20&quot;:24.1,&quot;tWendu30&quot;:20.4,&quot;tShidu30&quot;:40.5&#125;,&#123;&quot;id&quot;:2,&quot;nowtime&quot;:&quot;2020-09-02 17:49:11&quot;,&quot;hongwai&quot;:23,&quot;fengxiang&quot;:&quot;北风&quot;,&quot;fengsu&quot;:&quot;21.4&quot;,&quot;wendu&quot;:45.6,&quot;shidu&quot;:48.4,&quot;pm&quot;:54.7,&quot;tWendu10&quot;:45.8,&quot;tShidu10&quot;:10.2,&quot;tWendu20&quot;:23.5,&quot;tShidu20&quot;:24.5,&quot;tWendu30&quot;:27.1,&quot;tShidu30&quot;:16.4&#125;]</code></pre>]]></content>
      
      
      <categories>
          
          <category> json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署</title>
      <link href="/2020/09/22/docker-bu-shu/"/>
      <url>/2020/09/22/docker-bu-shu/</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="Docker通过jar包部署并运行"><a href="#Docker通过jar包部署并运行" class="headerlink" title="Docker通过jar包部署并运行"></a>Docker通过jar包部署并运行</h1><ol><li><p>上传jar到服务器的指定目录</p></li><li><p>在该目录下创建Dockerfile 文件</p><pre><code> vim Dockerfile</code></pre><p> 注意：<br> X86和ARM 的jdk版本不一样<br><br> X86的Dockerfile文件如下：<br><br> FROM java:8<br> MAINTAINER bingo<br> ADD demo-0.0.1-SNAPSHOT.jar demo.jar<br> EXPOSE 8080<br> ENTRYPOINT [“java”,”-jar”,”demo.jar”]<br> ARM的Dockerfile文件如下：</p><pre><code> FROM arm64v8/openjdk:8 MAINTAINER duan ADD springBootDocker.jar demo.jar EXPOSE 8888    ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]</code></pre><p> 说明：</p><pre><code> from java:8   拉取一个jdk为1.8的docker image maintainer  作者是duan demo-0.0.1-SNAPSHOT.jar 就是你上传的jar包，替换为jar包的名称 demo.jar  是你将该jar包重新命名为什么名称，在容器中运行 expose  该容器暴露的端口是多少，就是jar在容器中以多少端口运行 entrypoint 容器启动之后执行的命令，java -jar demo.jar  即启动jar</code></pre></li><li><p>创建好Dockerfile文件之后，执行命令 构建镜像</p><pre><code> docker build -t my/demo .</code></pre><p> 注意最后的 .  表示 Dockerfile 文件在当前目录下<br> my&#x2F;demo  构建之后镜像名称</p></li><li><p>镜像构建成功之后，就可以运行容器了</p><pre><code> docker run -d --restart=always --name demo -p 8080:8080  my/demo   </code></pre></li><li><p>一些常用的docker命令</p><pre><code> docker ps :查看正在运行中的容器 docker ps - a :  查看所有的容器 docker stop/start 容器名 ：启动停止容器 docker rm 容器id:删除容器 docker images: 查看镜像 docker rmi 镜像id:删除镜像</code></pre></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis逆向工程</title>
      <link href="/2020/09/22/mybatis-ni-xiang-gong-cheng/"/>
      <url>/2020/09/22/mybatis-ni-xiang-gong-cheng/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="逆向工程所依赖的jar包"><a href="#逆向工程所依赖的jar包" class="headerlink" title="逆向工程所依赖的jar包"></a>逆向工程所依赖的jar包</h2></li></ul><pre><code> &lt;dependencies&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.mybatis&lt;/groupId&gt;           &lt;artifactId&gt;mybatis&lt;/artifactId&gt;           &lt;version&gt;3.4.5&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;           &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;           &lt;version&gt;1.3.5&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;mysql&lt;/groupId&gt;           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;           &lt;version&gt;5.1.6&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework&lt;/groupId&gt;           &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;           &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;       &lt;/dependency&gt;   &lt;/dependencies&gt;</code></pre><ul><li><h2 id="generator-xml配置文件"><a href="#generator-xml配置文件" class="headerlink" title="generator.xml配置文件"></a>generator.xml配置文件</h2></li></ul><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;&lt;!--生成的jar包都是3点多--&gt;    &lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;commentGenerator&gt;&lt;!--            suppressAllComments属性值：--&gt;&lt;!--            ture:自动生成实体类，SQL映射文件时没有注释--&gt;&lt;!--            fauls:自动生成实体类，SQL映射文件有注释--&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;        &lt;/commentGenerator&gt;        &lt;!-- 数据库连接信息 驱动类 连接地址 用户名 密码 --&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;                        connectionURL=&quot;jdbc:mysql://localhost:3306/spring&quot;                        userId=&quot;root&quot;                        password=&quot;123456&quot;&gt;        &lt;/jdbcConnection&gt;&lt;!--    forceBigDecimals属性值：        ture:把数据表中的DECTMAL和NUMERIC类型解析为java.math.BigDecimal类型        false:解析为Integer类型        --&gt;        &lt;javaTypeResolver &gt;            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;        &lt;/javaTypeResolver&gt;        &lt;!--targetProject属性值:实体类的生成位置        targetPackage属性值:实体类所在包的路径 --&gt;        &lt;!-- 生成po类的位置 --&gt;        &lt;javaModelGenerator targetPackage=&quot;cn.itcast.ssm.po&quot; targetProject=&quot;.\src\main\java&quot;&gt;&lt;!--            trimStrings属性值:--&gt;&lt;!--            true:对数据库的查询结果进行trim（去空格）操作--&gt;&lt;!--            false:不进行trim操作--&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;        &lt;/javaModelGenerator&gt;        &lt;!--        targetProject属性值:SQL映射文件的生成位置        targetPackage属性值:SQL映射文件所在包的路径        --&gt;        &lt;!-- mapper映射文件的生成位置 --&gt;        &lt;sqlMapGenerator targetPackage=&quot;cn.itcast.ssm.mapper&quot;  targetProject=&quot;.\src\main\java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;        &lt;/sqlMapGenerator&gt;        &lt;!-- mapper接口生成的位置 --&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;cn.itcast.ssm.mapper&quot;  targetProject=&quot;.\src\main\java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;        &lt;/javaClientGenerator&gt;        &lt;!-- 指定数据库表 --&gt;        &lt;table tableName=&quot;account&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;user&quot;&gt;&lt;/table&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><p>运行测试方法类</p><pre><code>import org.mybatis.generator.api.MyBatisGenerator;import org.mybatis.generator.config.Configuration;import org.mybatis.generator.config.xml.ConfigurationParser;import org.mybatis.generator.exception.InvalidConfigurationException;import org.mybatis.generator.exception.XMLParserException;import org.mybatis.generator.internal.DefaultShellCallback;import java.io.File;import java.io.IOException;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;public class Test &#123;    public static void main(String[] args) throws IOException, XMLParserException, SQLException, InterruptedException, InvalidConfigurationException &#123;        File file = new File(&quot;src/main/resources/generator.xml&quot;);//配置文件        List&lt;String&gt; warnings = new ArrayList();        ConfigurationParser cp = new ConfigurationParser(warnings);        Configuration config = cp.parseConfiguration(file);        DefaultShellCallback callback = new DefaultShellCallback(true);        //逆向工程的核心类        MyBatisGenerator generator = new MyBatisGenerator(config,callback,warnings);        generator.generate(null);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot热部署失败解决方案</title>
      <link href="/2020/07/30/springboot-re-bu-shu-shi-bai-jie-jue-fang-an/"/>
      <url>/2020/07/30/springboot-re-bu-shu-shi-bai-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<pre><code>&lt;!--热部署配置--&gt; &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20200423152859682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDE3Mjc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM架构使用Docker部署的坑</title>
      <link href="/2020/07/30/arm-xi-tong-shi-yong-docker-bu-shu-de-keng/"/>
      <url>/2020/07/30/arm-xi-tong-shi-yong-docker-bu-shu-de-keng/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="需要注意-arm的jdk"><a href="#需要注意-arm的jdk" class="headerlink" title="需要注意 arm的jdk"></a>需要注意 arm的jdk</h2></li></ul><pre><code>FROM arm64v8/openjdk:8MAINTAINER duanADD springBootDocker.jar demo.jarEXPOSE 8888   ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]</code></pre><p>创建好Dockerfile文件之后，执行命令 构建镜像：</p><pre><code>  docker build -t my/demo .</code></pre><p>  注意最后的 .  表示 Dockerfile 文件在当前目录下</p><p>   my&#x2F;demo  构建之后镜像名称</p><p>   镜像构建成功之后，就可以运行容器了：</p><pre><code>   docker run -d --name demo -p 8080:8080 my/demo</code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库笔记</title>
      <link href="/2020/07/30/oracle-shu-ju-ku/"/>
      <url>/2020/07/30/oracle-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle数据库笔记"><a href="#Oracle数据库笔记" class="headerlink" title="Oracle数据库笔记"></a><font color='red'>Oracle数据库笔记</font></h1><ul><li><h3 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h3></li></ul><pre class="line-numbers language-create"><code class="language-create">datafile 'c:\itheima.dbf'size 100mautoextend onnext 10m;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="删除表空间"><a href="#删除表空间" class="headerlink" title="删除表空间"></a>删除表空间</h3></li></ul><pre><code>drop tablespace itheima;</code></pre><ul><li><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3></li></ul><pre><code>create user itheimaidentified by itheimadefault tablespace itheima;                   --给用户授权                   --oracle数据库中常用角色connect            --连接角色，基本角色resource           --开发者角色dba                --超级管理员角色</code></pre><ul><li><h3 id="给itheima授予dba角色"><a href="#给itheima授予dba角色" class="headerlink" title="给itheima授予dba角色"></a>给itheima授予dba角色</h3></li></ul><pre><code>grant dba to itheima;</code></pre><ul><li><h2 id="切换到itheima用户下"><a href="#切换到itheima用户下" class="headerlink" title="切换到itheima用户下"></a>切换到itheima用户下</h2></li><li><h3 id="创建一个person表"><a href="#创建一个person表" class="headerlink" title="创建一个person表"></a>创建一个person表</h3></li></ul><pre><code>create table person(       pid number(20),       name varchar2(10));</code></pre><ul><li><h3 id="查询列表"><a href="#查询列表" class="headerlink" title="查询列表"></a>查询列表</h3></li></ul><pre><code>select * from person;grant dba to itheima;</code></pre><ul><li><h3 id="添加一列"><a href="#添加一列" class="headerlink" title="添加一列"></a>添加一列</h3></li></ul><pre><code>alter table person add(gender number(1));</code></pre><ul><li><h3 id="删除一列"><a href="#删除一列" class="headerlink" title="删除一列"></a>删除一列</h3></li></ul><pre><code>alter table person drop column gender;</code></pre><ul><li><h3 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h3></li></ul><pre><code>alter table person rename column gender to sex;</code></pre><ul><li><h3 id="修改列类型"><a href="#修改列类型" class="headerlink" title="修改列类型"></a>修改列类型</h3></li></ul><pre><code>alter table person modify gender char(1);</code></pre><ul><li><h3 id="添加一条记录-CRUD都得提交事务"><a href="#添加一条记录-CRUD都得提交事务" class="headerlink" title="添加一条记录(CRUD都得提交事务)"></a>添加一条记录(CRUD都得提交事务)</h3></li></ul><pre><code>insert into person (pid,name) values(5,&#39;小明&#39;);commit;</code></pre><ul><li><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3></li></ul><pre><code>update person set name = &#39;小马&#39; where pid =5;</code></pre><ul><li><h3 id="删除表中所有记录"><a href="#删除表中所有记录" class="headerlink" title="删除表中所有记录"></a>删除表中所有记录</h3></li></ul><pre><code>delete from person;</code></pre><ul><li><h3 id="删除表结构"><a href="#删除表结构" class="headerlink" title="删除表结构"></a>删除表结构</h3></li></ul><pre><code>drop table person;</code></pre><p> 先删除表，再次创建表，效果等用于删除表中的全部记录。在数据量的大的情况下，尤其在表中带有索引的情况下，该操作的小路很高。<br>索引可以提高查询效率，但是会影响增删改查。</p><pre><code>truncate table person;</code></pre><p>序列不真的属于任何一张表，但是可以逻辑和表绑定</p><p>序列:默认从1开始一次递增,主要给主键复制使用</p><pre><code>nextval下一个值，currval当前值dual:虚表，知识为了不全语法，没有意义create sequence s_person;select s_person.nextval from dual;insert into person(pid,name)values(s_person.nextval,&#39;小敏&#39;);commit;</code></pre><p>scott用户，密码默认是：tiger（刚安装数据库是被锁定的，得进行解锁）</p><ul><li><h2 id="初学者必学"><a href="#初学者必学" class="headerlink" title="初学者必学"></a>初学者必学</h2></li><li><h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3></li></ul><pre><code>alter  user scott account unlock;--解锁密码(重置密码)alter user scott identified by tiger;--切换到scoot用户--切换到scott用户--单行函数：作用于一行，返回一个值---字符函数select upper(&#39;yes&#39;) from dual;--YESselect lower(&#39;YES&#39;) from dual;--数值函数select round(26.18,1) from dual;--四舍五入26.2select round(26.18,-1) from dual;--四舍五入30select mod(10,3) from dual; --求余数1--日期函数--查询出emp表中所有员工距离现在几天select  sysdate-e.hiredate from emp e;--算出明天此刻select sysdate+1 from dual;---转换函数--日期转换字符串select to_char(sysdate,&#39;fm yyyy-mm-dd hh24:mi:ss&#39;) from dual;--字符串转换日期select to_date(&#39;2018-6-7 16:39:50&#39;,&#39;fm yyyy-mm-dd hh24:mi:ss&#39;) from dual;--通用函数--算出emp表中所有员工的年薪--奖金里面有nullselect e.sal*12+nvl(e.comm,0 )from emp e;---条件表达式给emp表中员工起中文名称select e.ename,       case e.ename             when &#39;SMTH&#39; then &#39;曹贼&#39;                   when &#39;ALLEN&#39;then &#39;大耳贼&#39;                       when &#39;WARD&#39; then &#39;诸葛小二&#39;                                           else&#39;无名&#39;                                                  endfrom emp e;--oracle除了起别名都用单引号，--oracle专用条件表达式select e.ename,   decode(e.ename,       &#39;SMTH&#39;,  &#39;曹贼&#39;,            &#39;ALLEN&#39;, &#39;大耳贼&#39;,               &#39;WARD&#39;, &#39;诸葛小二&#39;,                   &#39;无名&#39;) 中文名                    from emp e;</code></pre><ul><li><h2 id="多行函数（聚合函数）：作用于多行，返回一个值"><a href="#多行函数（聚合函数）：作用于多行，返回一个值" class="headerlink" title="多行函数（聚合函数）：作用于多行，返回一个值"></a>多行函数（聚合函数）：作用于多行，返回一个值</h2></li></ul><pre><code>select count(1) from emp;--查询总数量 count(主键这一列)select sum(sal) from emp;--工资总和select min(sal) from emp;--最大工资select avg(sal) from emp;--平均工资--分组查询--查询出每个部门的平均工资--分组查询中，出现在group by 后面的原始列，才能出现在select后面--没有出现在group by 后面的列，想在select后面，必须要加上聚合函数。--聚合函数可以吧多行记录变为一个值select e.deptno,avg(e.sal)from emp e group by e.deptno;---查询平均工资高于2000select e.deptno,avg(e.sal) asalfrom emp e group by e.deptnohaving avg(e.sal)&gt;2000;--所有条件都不能使用别名来判断select ename,sal s from emp where sal&gt;1500;--查询出每个部门工资高于800的员工的平均工资select e.deptno,avg(e.sal) asalfrom emp ewhere e.sal&gt;800 group by e.deptno;--where是过滤分组签的数据，having是过滤分组后的数据。--表现形式：where必须在group by 之前，having是在group by 之后。--查询出每个部门工资高于800的员工的平均工资，然后在查询出平均工资高于2000的员工select e.deptno,avg(e.sal) asalfrom emp ewhere e.sal&gt;800 group by e.deptno</code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql语法知识</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL:"></a>DDL:</h1><pre><code>一 数据库的使用：                    mysql -uroot -p123456 登录数据库                    show databases 查看所有的数据库                    create database 数据库名字    添加数据库                    create database if not exists +数据库名字 character set +所用字节 ；创建数据库如果不存在并设置字符格式                    alter database +数据库名字 character set 字符集名称；修改数据库字符                    select database();查询正在使用的数据库名称                    use +数据库名字；二 操作表            1.创建                        &lt;1&gt;.语法：                                create table 表名（                                            列名1  数据类型，                                            列名2  数据类型，                                            .......                                            列名n  数据类型                                ）；                                注意：最后一个列名不用加逗号                        &lt;2&gt;.数据库类型                                     1. int ：整数类型                                    2. double :小数类型                                    3. date : 日期 ，只包含年月日，yyyy-mm-dd                                    4. datetime :日期 ，包含年月日时分秒 yyyy-MM-dd  HH-mm-ss                                    5. timestamp : 时间错类型  包含年月日时分秒  yyyy-MM-dd HH-mm-ss(系统会自己输进去当前时间)                                    6.varchar :字符串                                        例如   name varchar(20):姓名最大20个字符            2.查询                        &lt;1&gt; show tables;查询数据库中所有的表名称                        &lt;2&gt; desc +表名;查询表结构                         &lt;3&gt;show create table 表名;查询表的字符集            3.修改                        &lt;1&gt;修改表名                                alter table 表名 rename to 新表名                        &lt;2&gt;修改字符集                                alter table stu character set 字符集的名称;                        &lt;3&gt;添加一列                                alter table 表名 add 列名 数据类型；                        &lt;4&gt;修改列名称                                &lt;1&gt; alter table 表名 change列名  新列名  设置类型;                                &lt;2&gt; alter table 表名 modify 列名       varchar(10);            4.删除                        drop +表名   ；   删除表                        alter table 表名 drop 被删除的列名;  删除列            5.复制                        create table stu(新创建的) like student（被复制的）;                                                                    </code></pre><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ol><li>所查询字段 + like ‘%段%’<br>eg:select * from user where realname like ‘%段%’</li><li>所查询字段 + like ‘%段%’ and 所查询字段 + like ‘%飞%’<br>eg: select * from user where realname like ‘%段%’ and realname like ‘%飞%’</li><li>查询出既含有“段”同时又有“飞”的所有记录<br>select * from user where realname like ‘%段%飞%’</li></ol><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>select * from 表名<br>order by 列名 asc ; 升序</p><p>select * from 表名<br>order by 列名 desc ; 降序</p><h2 id="DML-增删改表中的数据"><a href="#DML-增删改表中的数据" class="headerlink" title="DML:增删改表中的数据"></a>DML:增删改表中的数据</h2><pre><code>    1.添加数据                insert into 表名（列名1，列名2，列名n） values(值1，值2,....值n);            注意：列名要与值一一对应                        如果表名后，不定义列名，则默认给所有列添加值                        除了数字类型，其他类型需要引号单引号和双引号都可以  日期格式：“1893-11-11”    2.删除数据：                1.delete from 表名 [where  条件]                           例如：  DELETE FROM stu WHERE id =1;                        注意：如果不添加条件  会删除表中所有记录                2.truncate table stu ;   删除表中所有记录  ----先删除表在创建一张一样的表。    3.修改数据:                1.updata 表名 set 列名1= 值1 ，列名2= 值2 ，...[where 条件]                        例如:  UPDATE stu SET age=117 WHERE id =3;                        注意 ：如果不添加条件 会修改表中所有元素</code></pre><h2 id="DQL-”查询表中的记录-select-from-表名"><a href="#DQL-”查询表中的记录-select-from-表名" class="headerlink" title="DQL:”查询表中的记录 select * from 表名;"></a>DQL:”查询表中的记录 select * from 表名;</h2><pre><code>    1.排序查询：            order by 字句                *order by 排序字段1 排序方式1 ，排序字段2 排序方式2 ....            例如：                        SELECT * FROM stu1 ORDER BY math +排序方式                         SELECT * FROM stu1 ORDER BY math DESC, english DESC;（多组排序）            排序方式：ASC:升序，默认                                DESC:降序    2.聚合函数：将一列数据作为一个整体，进行纵向的计算。                    &lt;1&gt; count : 计算个数                                    (1)select count(列名) from 表名；                                    (2)select count（ifnull（列名，0）） from 表名；                                    (3)count（*）; 选择所有的列                    &lt;2&gt; max  : 计算最大值                                    (1)SELECT MAX(列名) FROM 表名;                    &lt;3&gt; min  :  计算最小值                                    (1)SELECT MIN(列名) FROM 表名;                    &lt;4&gt; sum  :  计算和                                    (1)SELECT SUM(列名) FROM 表名;                    &lt;5&gt; avg  :   计算平均值                                    (1)SELECT AVG(列名) FROM 表名;                            注意：聚合函数的计算，排除null值。                            解决：                                    1.选择不包含非空的列                                    2.ifnull函数    3.分组查询：            &lt;1&gt;  group by 分组字段                         SELECT FROM 表名 GROUP BY 列名;                    注意：                        1.分组之后查询的字段：分组字段  聚合函数                                SELECT sex, AVG(math) FROM stu1 GROUP BY sex;                                SELECT sex, AVG(math),COUNT(id) FROM stu1 GROUP BY sex;可以多加一些聚合函数                        2where和having的区别：                                1.where在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不进行限定，则不会查询。                                2.where后不可以跟聚合函数，having可以进行聚合函数的判断。    4.分页查询：            1.语法：limit 开始的索引，每条查询的页数。                    SELECT * FROM 表名 LIMIT 索引，所查询的页数;                    SELECT * FROM stu1 LIMIT 0,3;--第一页                    SELECT * FROM stu1 LIMIT 3,3;--第二页;                开始的索引=（当前页码 - 1）*每页显示的条数                    注意：每个数据库都有独特的分页方式</code></pre><h1 id="约束："><a href="#约束：" class="headerlink" title="约束："></a>约束：</h1><pre><code>    概念：对表中的数据进行限定，保证数据的正确性，有效性和完整性。    分类：        1.主键约束：primary key        2.非空约束：not null        3.唯一约束：unique        4.外键约束：foreign key    #非空约束：not null:            1.建表时添加非空约束：                    CREATE TABLE stu3(                                id INT,                                NAME VARCHAR(20) NOT NULL                    );            2.创建表完后，添加非空约束            3.删除非空约束：ALTER TABLE stu3 MODIFY NAME VARCHAR(20);    #唯一约束：unique ，值不能重复            1.添加唯一约束：                    CREATE TABLE stu3(                                        id INT,                                        NAME VARCHAR(20)  unique                            );            2.删除唯一约束：                    AlTER TABLE STU3 DROP INDEX NAME;            3.再创建表后，添加唯一约束:                    ALTER TABLE stu2 MODIFY phonenumber VARCHAR(20) UNIQUE;    #主键约束：primary key:            1.创建表示添加主键：                            CREATE TABLE stu4(                                        id INT PRIMARY KEY,                                        NAME VARCHAR(20)                                                                    );            2.删除主键：                    ALTER TABLE stu4 DROP PRIMARY KEY;            3.创建完表后，添加主键：                    ALTER TABLE stu4 MODIFY id INT PRIMARY KEY;            4.自动增长：                    1.概念：如果谋一列是数值类型的，使用auto_increment 可以来完成值得自动增长                    2.在创建表时，添加主键约束，并且完成主键自增长                            CREATE TABLE stu4(                                    id INT PRIMARY KEY AUTO_INCREMENT,                                    NAME VARCHAR(20)                            );                            INSERT INTO stu4 VALUES(NULL ,&quot;ccc&quot;);                                    之后不需要再添加元素，会自动添加                    3.删除自动增长：                            ALTER TABLE stu4 MODIFY id INT;    #外键约束：foreign key：            1.在创建表时，可以添加外键                    *语法：                            create  table 表名(                                ...                                外键列                                constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)                            );                    例子：                                        CREATE TABLE department(                                            id INT PRIMARY KEY AUTO_INCREMENT,                                            dep_name VARCHAR(20),                                            dep_locationion VARCHAR(20)                                        );                                        CREATE TABLE employee(                                            id INT PRIMARY KEY AUTO_INCREMENT,                                            NAME VARCHAR(20),                                            age INT,                                            dep_id INT,                                            CONSTRAINT emp_dep FOREIGN KEY (dep_id) REFERENCES department(id)                                        );                                        INSERT INTO department VALUES(NULL,&#39;研发部&#39;,&#39;广州&#39;),(NULL,&quot;销售部&quot;,&quot;深圳&quot;);                                        INSERT INTO employee (NAME,age,dep_id) VALUE (&quot;张三&quot;,20,1);                                        INSERT INTO employee (NAME,age,dep_id) VALUE (&quot;李四&quot;,21,1);                                        INSERT INTO employee (NAME,age,dep_id) VALUE (&quot;王五&quot;,22,1);                                        INSERT INTO employee (NAME,age,dep_id) VALUE (&quot;大王&quot;,215,2);                                        INSERT INTO employee (NAME,age,dep_id) VALUE (&quot;小王&quot;,24,2);                                        INSERT INTO employee (NAME,age,dep_id) VALUE (&quot;老王&quot;,26,2);                                        SELECT * FROM employee;                                        SELECT * FROM department;            2.删除外键：                    Alter table  表名 drop foreign key 外键名称；                        例子：ALTER TABLE employee DROP FOREIGN KEY emp_dep;            3. 创建表之后，添加外键                    &lt;1&gt;ALTER table 表名 add constraint 外键名称 foreign key (外键字段名称) peferences  主表列名称；                                4.级联操作                    1. 添加级联操作                    语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称                                 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;                                例如：ALTER TABLE employee ADD CONSTRAINT  emp_dep FOREIGN KEY                                            (dep_id) REFERENCES department(id) ON UPDATE CASCADE ;                    2. 分类：                                1. 级联更新：ON UPDATE CASCADE                                 2. 级联删除：ON DELETE CASCADE </code></pre><h2 id="数据库的设计："><a href="#数据库的设计：" class="headerlink" title="数据库的设计："></a>数据库的设计：</h2><pre><code>            1.多表之间的关系                1.分类                    &lt;1&gt;一对一：例如：人与身份证                    &lt;2&gt;一对多（多对一）：例如：部门与员工                    &lt;3&gt;多对多：学生与课程的关系                2.实现关系：                    &lt;1&gt;一对多：（多对一）：                            在多的一方建立外键，指向一的一方的主键。                    &lt;2&gt;多对多：                            多对多关系实现是需要借助第三张中间表。至少包含两个字段，                            这两个字段作为第三张表的外键，分别指向两张表的主键                    &lt;3&gt;一对一：                            可以在任意一方添加外键指向另一方的主键                3.演示：                            CREATE TABLE tab_category(                                    cid INT PRIMARY KEY AUTO_INCREMENT,                                    cname VARCHAR(100) NOT NULL UNIQUE                            );                            CREATE TABLE tab_toute(                                            rid INT PRIMARY KEY AUTO_INCREMENT,                                            rname VARCHAR(100) NOT NULL UNIQUE,                                            price DOUBLE,                                            rdate DATE,                                            cid INT,                                            FOREIGN KEY(cid) REFERENCES tab_category(cid)                            );                            CREATE TABLE tab_user(                                        uid INT PRIMARY KEY AUTO_INCREMENT,                                        username VARCHAR(100) UNIQUE NOT NULL,                                        PASSWORD VARCHAR(30) NOT NULL,                                        NAME VARCHAR(100),                                        birthday DATE,                                        sex CHAR(1) DEFAULT &#39;男&#39;,                                        telephone VARCHAR(11),                                        email VARCHAR(100)                            );                            CREATE TABLE tab_favorite(                                        rid INT,                                        DATE DATETIME,                                        uid INT,                                          PRIMARY KEY(rid,uid),                                        FOREIGN KEY (rid) REFERENCES tab_toute(rid),                                        FOREIGN KEY (uid) REFERENCES tab_user(uid)                            );            2.数据库设计的范式                    概念：设计关系数据库时，遵从不同的规范要求，                                设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，                                各种范式呈递次规范，越高的范式数据库冗余越小                    类型：第一范式（1NF） 第二范式(2NF) 第三范式(3NF) 巴斯-科德范式（BCNF）                            第四范式（4NF） 和第五范式（5NF 又称为完美范式）                                            1. 第一范式（1NF）：每一列都是不可分割的原子数据项                        2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）                            * 几个概念：                                1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A                                    例如：学号--&gt;姓名。  （学号，课程名称） --&gt; 分数                                2. 完全函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。                                    例如：（学号，课程名称） --&gt; 分数                                3. 部分函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。                                    例如：（学号，课程名称） -- &gt; 姓名                                4. 传递函数依赖：A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A                                    例如：学号--&gt;系名，系名--&gt;系主任                                5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码                                    例如：该表中码为：（学号，课程名称）                                    * 主属性：码属性组中的所有属性                                    * 非主属性：除过码属性组的属性                                                            3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</code></pre><h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><pre><code>                1. 命令行：                        * 语法：                            * 备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径                            * 还原：                                1. 登录数据库                                2. 创建数据库                                3. 使用数据库                                4. 执行文件。source 文件路径                2. 图形化工具：        </code></pre><h2 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h2><pre><code>            * 笛卡尔积：    * 有两个集合A,B .取这两个集合的所有组成情况。    * 要完成多表查询，需要消除无用的数据* 多表查询的分类：    1. 内连接查询：        1. 隐式内连接：使用where条件消除无用数据            * 例子：            -- 查询所有员工信息和对应的部门信息            SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;            -- 查询员工表的名称，性别。部门表的名称            SELECT emp.name,emp.gender,dept.name FROM em            便捷写法：                    SELECT                         t1.name, -- 员工表的姓名                        t1.gender,-- 员工表的性别                        t2.name -- 部门表的名称                    FROM                        emp(表名1) t1,                        dept(表名2) t2                    WHERE                         t1.`dept_id` = t2.`id`;    2. 显式内连接：            * 语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件            * 例如：                * SELECT * FROM emp INNER(可省略) JOIN dept ON emp.`dept_id` = dept.`id`;                * SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;        3. 外链接查询：        1. 左外连接：            * 语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；            * 查询的是左表所有数据以及其交集部分。            * 例子：                -- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称                SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;        2. 右外连接：            * 语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；            * 查询的是右表所有数据以及其交集部分。            * 例子：                SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;*子查询：        * 概念：查询中嵌套查询，称嵌套查询为子查询。            -- 查询工资最高的员工信息            -- 1 查询最高的工资是多少 9000                SELECT MAX(salary) FROM emp;                        -- 2 查询员工信息，并且工资等于9000的                SELECT * FROM emp WHERE emp.`salary` = 9000;                        -- 一条sql就完成这个操作。子查询                SELECT * FROM emp WHERE emp.`salary` =  (SELECT MAX(salary) FROM emp);            2. 子查询的结果是多行单列的：                * 子查询可以作为条件，使用运算符in来判断                -- 查询&#39;财务部&#39;和&#39;市场部&#39;所有的员工信息                SELECT id FROM dept WHERE NAME = &#39;财务部&#39; OR NAME = &#39;市场部&#39;;                SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;                -- 子查询                SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &#39;财务部&#39; OR NAME = &#39;市场部&#39;);            3. 子查询的结果是多行多列的：                * 子查询可以作为一张虚拟表参与查询                -- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息                -- 子查询                SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.`join_date` &gt; &#39;2011-11-11&#39;) t2                WHERE t1.id = t2.dept_id;                                -- 普通内连接                SELECT * FROM emp t1,dept t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` &gt;  &#39;2011-11-11&#39;            * 多表查询练习            -- 部门表            CREATE TABLE dept (              id INT PRIMARY KEY PRIMARY KEY, -- 部门id              dname VARCHAR(50), -- 部门名称              loc VARCHAR(50) -- 部门所在地            );                        -- 添加4个部门            INSERT INTO dept(id,dname,loc) VALUES             (10,&#39;教研部&#39;,&#39;北京&#39;),            (20,&#39;学工部&#39;,&#39;上海&#39;),            (30,&#39;销售部&#39;,&#39;广州&#39;),            (40,&#39;财务部&#39;,&#39;深圳&#39;);                                                -- 职务表，职务名称，职务描述            CREATE TABLE job (              id INT PRIMARY KEY,              jname VARCHAR(20),              description VARCHAR(50)            );                        -- 添加4个职务            INSERT INTO job (id, jname, description) VALUES            (1, &#39;董事长&#39;, &#39;管理整个公司，接单&#39;),            (2, &#39;经理&#39;, &#39;管理部门员工&#39;),            (3, &#39;销售员&#39;, &#39;向客人推销产品&#39;),            (4, &#39;文员&#39;, &#39;使用办公软件&#39;);                                                -- 员工表            CREATE TABLE emp (              id INT PRIMARY KEY, -- 员工id              ename VARCHAR(50), -- 员工姓名              job_id INT, -- 职务id              mgr INT , -- 上级领导              joindate DATE, -- 入职日期              salary DECIMAL(7,2), -- 工资              bonus DECIMAL(7,2), -- 奖金              dept_id INT, -- 所在部门编号              CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),              CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)            );                        -- 添加员工            INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES             (1001,&#39;孙悟空&#39;,4,1004,&#39;2000-12-17&#39;,&#39;8000.00&#39;,NULL,20),            (1002,&#39;卢俊义&#39;,3,1006,&#39;2001-02-20&#39;,&#39;16000.00&#39;,&#39;3000.00&#39;,30),            (1003,&#39;林冲&#39;,3,1006,&#39;2001-02-22&#39;,&#39;12500.00&#39;,&#39;5000.00&#39;,30),            (1004,&#39;唐僧&#39;,2,1009,&#39;2001-04-02&#39;,&#39;29750.00&#39;,NULL,20),            (1005,&#39;李逵&#39;,4,1006,&#39;2001-09-28&#39;,&#39;12500.00&#39;,&#39;14000.00&#39;,30),            (1006,&#39;宋江&#39;,2,1009,&#39;2001-05-01&#39;,&#39;28500.00&#39;,NULL,30),            (1007,&#39;刘备&#39;,2,1009,&#39;2001-09-01&#39;,&#39;24500.00&#39;,NULL,10),            (1008,&#39;猪八戒&#39;,4,1004,&#39;2007-04-19&#39;,&#39;30000.00&#39;,NULL,20),            (1009,&#39;罗贯中&#39;,1,NULL,&#39;2001-11-17&#39;,&#39;50000.00&#39;,NULL,10),            (1010,&#39;吴用&#39;,3,1006,&#39;2001-09-08&#39;,&#39;15000.00&#39;,&#39;0.00&#39;,30),            (1011,&#39;沙僧&#39;,4,1004,&#39;2007-05-23&#39;,&#39;11000.00&#39;,NULL,20),            (1012,&#39;李逵&#39;,4,1006,&#39;2001-12-03&#39;,&#39;9500.00&#39;,NULL,30),            (1013,&#39;小白龙&#39;,4,1004,&#39;2001-12-03&#39;,&#39;30000.00&#39;,NULL,20),            (1014,&#39;关羽&#39;,4,1007,&#39;2002-01-23&#39;,&#39;13000.00&#39;,NULL,10);                                                -- 工资等级表            CREATE TABLE salarygrade (              grade INT PRIMARY KEY,   -- 级别              losalary INT,  -- 最低工资              hisalary INT -- 最高工资            );                        -- 添加5个工资等级            INSERT INTO salarygrade(grade,losalary,hisalary) VALUES             (1,7000,12000),            (2,12010,14000),            (3,14010,20000),            (4,20010,30000),            (5,30010,99990);                        -- 需求：                        -- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述            /*                分析：                    1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表                    2.查询条件 emp.job_id = job.id                        */            SELECT                 t1.`id`, -- 员工编号                t1.`ename`, -- 员工姓名                t1.`salary`,-- 工资                t2.`jname`, -- 职务名称                t2.`description` -- 职务描述            FROM                 emp t1, job t2            WHERE                 t1.`job_id` = t2.`id`;                                                -- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置            /*                分析：                    1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept                    2. 条件： emp.job_id = job.id and emp.dept_id = dept.id            */                        SELECT                 t1.`id`, -- 员工编号                t1.`ename`, -- 员工姓名                t1.`salary`,-- 工资                t2.`jname`, -- 职务名称                t2.`description`, -- 职务描述                t3.`dname`, -- 部门名称                t3.`loc` -- 部门位置            FROM                 emp t1, job t2,dept t3            WHERE                 t1.`job_id` = t2.`id` AND t1.`dept_id` = t3.`id`;                           -- 3.查询员工姓名，工资，工资等级            /*                分析：                    1.员工姓名，工资 emp  工资等级 salarygrade                    2.条件 emp.salary &gt;= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary                        emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary            */            SELECT                 t1.ename ,                t1.`salary`,                t2.*            FROM emp t1, salarygrade t2            WHERE t1.`salary` BETWEEN t2.`losalary` AND t2.`hisalary`;                                                -- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级            /*                分析：                    1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade                    2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary                                    */            SELECT                 t1.`ename`,                t1.`salary`,                t2.`jname`,                t2.`description`,                t3.`dname`,                t3.`loc`,                t4.`grade`            FROM                 emp t1,job t2,dept t3,salarygrade t4            WHERE                 t1.`job_id` = t2.`id`                 AND t1.`dept_id` = t3.`id`                AND t1.`salary` BETWEEN t4.`losalary` AND t4.`hisalary`;                                                -- 5.查询出部门编号、部门名称、部门位置、部门人数                        /*                分析：                    1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表                    2.使用分组查询。按照emp.dept_id完成分组，查询count(id)                    3.使用子查询将第2步的查询结果和dept表进行关联查询                                */            SELECT                 t1.`id`,t1.`dname`,t1.`loc` , t2.total            FROM                 dept t1,                (SELECT                    dept_id,COUNT(id) total                FROM                     emp                GROUP BY dept_id) t2            WHERE t1.`id` = t2.dept_id;                                    -- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询                        /*                分析：                    1.姓名 emp， 直接上级的姓名 emp                        * emp表的id 和 mgr 是自关联                    2.条件 emp.id = emp.mgr                    3.查询左表的所有数据，和 交集数据                        * 使用左外连接查询                            */            /*            select                t1.ename,                t1.mgr,                t2.`id`,                t2.ename            from emp t1, emp t2            where t1.mgr = t2.`id`;                        */                        SELECT                 t1.ename,                t1.mgr,                t2.`id`,                t2.`ename`            FROM emp t1            LEFT JOIN emp t2            ON t1.`mgr` = t2.`id`;</code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><pre><code>1. 事务的基本介绍    1. 概念：        *  如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。            2. 操作：        1. 开启事务： start transaction;        2. 回滚：rollback;        3. 提交：commit;    3. 例子：        CREATE TABLE account (            id INT PRIMARY KEY AUTO_INCREMENT,            NAME VARCHAR(10),            balance DOUBLE        );        -- 添加数据        INSERT INTO account (NAME, balance) VALUES (&#39;zhangsan&#39;, 1000), (&#39;lisi&#39;, 1000);                        SELECT * FROM account;        UPDATE account SET balance = 1000;        -- 张三给李四转账 500 元                -- 0. 开启事务        START TRANSACTION;        -- 1. 张三账户 -500                UPDATE account SET balance = balance - 500 WHERE NAME = &#39;zhangsan&#39;;        -- 2. 李四账户 +500        -- 出错了...        UPDATE account SET balance = balance + 500 WHERE NAME = &#39;lisi&#39;;                -- 发现执行没有问题，提交事务        COMMIT;                -- 发现出问题了，回滚事务        ROLLBACK;    4. MySQL数据库中事务默认自动提交                * 事务提交的两种方式：            * 自动提交：                * mysql就是自动提交的                * 一条DML(增删改)语句会自动提交一次事务。            * 手动提交：                * Oracle 数据库默认是手动提交事务                * 需要先开启事务，再提交        * 修改事务的默认提交方式：            * 查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交  0 代表手动提交            * 修改默认提交方式： set @@autocommit = 0;2. 事务的四大特征：    1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。    2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。    3. 隔离性：多个事务之间。相互独立。    4. 一致性：事务操作前后，数据总量不变3. 事务的隔离级别（了解）    * 概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。    * 存在问题：        1. 脏读：一个事务，读取到另一个事务中没有提交的数据        2. 不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。        3. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。    * 隔离级别：        1. read uncommitted：读未提交            * 产生的问题：脏读、不可重复读、幻读        2. read committed：读已提交 （Oracle）            * 产生的问题：不可重复读、幻读        3. repeatable read：可重复读 （MySQL默认）            * 产生的问题：幻读        4. serializable：串行化            * 可以解决所有的问题        * 注意：隔离级别从小到大安全性越来越高，但是效率越来越低        * 数据库查询隔离级别：            * select @@tx_isolation;        * 数据库设置隔离级别：            * set global transaction isolation level  级别字符串;    * 演示：        set global transaction isolation level read uncommitted;        start transaction;        -- 转账操作        update account set balance = balance - 500 where id = 1;        update account set balance = balance + 500 where id = 2;</code></pre><h2 id="DCL："><a href="#DCL：" class="headerlink" title="DCL："></a>DCL：</h2><pre><code>* SQL分类：    1. DDL：操作数据库和表    2. DML：增删改表中数据    3. DQL：查询表中数据    4. DCL：管理用户，授权* DBA：数据库管理员* DCL：管理用户，授权    1. 管理用户        1. 添加用户：            * 语法：CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;        2. 删除用户：            * 语法：DROP USER &#39;用户名&#39;@&#39;主机名&#39;;        3. 修改用户密码：                        UPDATE USER SET PASSWORD = PASSWORD(&#39;新密码&#39;) WHERE USER = &#39;用户名&#39;;            UPDATE USER SET PASSWORD = PASSWORD(&#39;abc&#39;) WHERE USER = &#39;lisi&#39;;                        SET PASSWORD FOR &#39;用户名&#39;@&#39;主机名&#39; = PASSWORD(&#39;新密码&#39;);            SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;123&#39;);            * mysql中忘记了root用户的密码？                1. cmd -- &gt; net stop mysql 停止mysql服务                    * 需要管理员运行该cmd                2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables                3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功                4. use mysql;                5. update user set password = password(&#39;你的新密码&#39;) where user = &#39;root&#39;;                6. 关闭两个窗口                7. 打开任务管理器，手动结束mysqld.exe 的进程                8. 启动mysql服务                9. 使用新密码登录。        4. 查询用户：            -- 1. 切换到mysql数据库            USE myql;            -- 2. 查询user表            SELECT * FROM USER;                        * 通配符： % 表示可以在任意主机使用用户登录数据库    2. 权限管理：        1. 查询权限：            -- 查询权限            SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;            SHOW GRANTS FOR &#39;lisi&#39;@&#39;%&#39;;        2. 授予权限：            -- 授予权限            grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;            -- 给张三用户授予所有权限，在任意数据库任意表上                        GRANT ALL ON *.* TO &#39;zhangsan&#39;@&#39;localhost&#39;;        3. 撤销权限：            -- 撤销权限：            revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;            REVOKE UPDATE ON db3.`account` FROM &#39;lisi&#39;@&#39;%&#39;;    </code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
